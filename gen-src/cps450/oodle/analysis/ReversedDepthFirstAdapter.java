/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.analysis;

import java.util.*;
import cps450.oodle.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEnd());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PClassTail> copy = new ArrayList<PClassTail>(node.getClassTail());
            Collections.reverse(copy);
            for(PClassTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassDef() != null)
        {
            node.getClassDef().apply(this);
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getBegin());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        outAStart(node);
    }

    public void inAClassTail(AClassTail node)
    {
        defaultIn(node);
    }

    public void outAClassTail(AClassTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassTail(AClassTail node)
    {
        inAClassTail(node);
        if(node.getClassDef() != null)
        {
            node.getClassDef().apply(this);
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        outAClassTail(node);
    }

    public void inAClassInheritance(AClassInheritance node)
    {
        defaultIn(node);
    }

    public void outAClassInheritance(AClassInheritance node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassInheritance(AClassInheritance node)
    {
        inAClassInheritance(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getInherits() != null)
        {
            node.getInherits().apply(this);
        }
        outAClassInheritance(node);
    }

    public void inAClassDef(AClassDef node)
    {
        defaultIn(node);
    }

    public void outAClassDef(AClassDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDef(AClassDef node)
    {
        inAClassDef(node);
        if(node.getClassEnd() != null)
        {
            node.getClassEnd().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PMethodDeclaration> copy = new ArrayList<PMethodDeclaration>(node.getMethodDeclaration());
            Collections.reverse(copy);
            for(PMethodDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVarDeclaration> copy = new ArrayList<PVarDeclaration>(node.getVarDeclaration());
            Collections.reverse(copy);
            for(PVarDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getClassInheritance() != null)
        {
            node.getClassInheritance().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getKlass() != null)
        {
            node.getKlass().apply(this);
        }
        outAClassDef(node);
    }

    public void inAVarDeclaration(AVarDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVarDeclaration(AVarDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclaration(AVarDeclaration node)
    {
        inAVarDeclaration(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVarInstantiation() != null)
        {
            node.getVarInstantiation().apply(this);
        }
        if(node.getVarTypeDeclaration() != null)
        {
            node.getVarTypeDeclaration().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarDeclaration(node);
    }

    public void inAVarTypeDeclaration(AVarTypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVarTypeDeclaration(AVarTypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTypeDeclaration(AVarTypeDeclaration node)
    {
        inAVarTypeDeclaration(node);
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAVarTypeDeclaration(node);
    }

    public void inAVarInstantiation(AVarInstantiation node)
    {
        defaultIn(node);
    }

    public void outAVarInstantiation(AVarInstantiation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarInstantiation(AVarInstantiation node)
    {
        inAVarInstantiation(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEqOp() != null)
        {
            node.getEqOp().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAVarInstantiation(node);
    }

    public void inAMethodDeclaration(AMethodDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclaration(AMethodDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclaration(AMethodDeclaration node)
    {
        inAMethodDeclaration(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getMethodEnd());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMethodDecEnd() != null)
        {
            node.getMethodDecEnd().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getMethodMiddle());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        {
            List<PVarDeclaration> copy = new ArrayList<PVarDeclaration>(node.getVarDeclaration());
            Collections.reverse(copy);
            for(PVarDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getMethodBegin());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMethodDecBegin() != null)
        {
            node.getMethodDecBegin().apply(this);
        }
        outAMethodDeclaration(node);
    }

    public void inAArgumentList(AArgumentList node)
    {
        defaultIn(node);
    }

    public void outAArgumentList(AArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentList(AArgumentList node)
    {
        inAArgumentList(node);
        if(node.getArgumentDeclaration() != null)
        {
            node.getArgumentDeclaration().apply(this);
        }
        {
            List<PArgumentDeclarationHead> copy = new ArrayList<PArgumentDeclarationHead>(node.getArgumentDeclarationHead());
            Collections.reverse(copy);
            for(PArgumentDeclarationHead e : copy)
            {
                e.apply(this);
            }
        }
        outAArgumentList(node);
    }

    public void inAArgumentDeclarationHead(AArgumentDeclarationHead node)
    {
        defaultIn(node);
    }

    public void outAArgumentDeclarationHead(AArgumentDeclarationHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentDeclarationHead(AArgumentDeclarationHead node)
    {
        inAArgumentDeclarationHead(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getArgumentDeclaration() != null)
        {
            node.getArgumentDeclaration().apply(this);
        }
        outAArgumentDeclarationHead(node);
    }

    public void inAArgumentDeclaration(AArgumentDeclaration node)
    {
        defaultIn(node);
    }

    public void outAArgumentDeclaration(AArgumentDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentDeclaration(AArgumentDeclaration node)
    {
        inAArgumentDeclaration(node);
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArgumentDeclaration(node);
    }

    public void inAIntVarType(AIntVarType node)
    {
        defaultIn(node);
    }

    public void outAIntVarType(AIntVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntVarType(AIntVarType node)
    {
        inAIntVarType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntVarType(node);
    }

    public void inAStringVarType(AStringVarType node)
    {
        defaultIn(node);
    }

    public void outAStringVarType(AStringVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringVarType(AStringVarType node)
    {
        inAStringVarType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringVarType(node);
    }

    public void inABooleanVarType(ABooleanVarType node)
    {
        defaultIn(node);
    }

    public void outABooleanVarType(ABooleanVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanVarType(ABooleanVarType node)
    {
        inABooleanVarType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanVarType(node);
    }

    public void inAIdVarType(AIdVarType node)
    {
        defaultIn(node);
    }

    public void outAIdVarType(AIdVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVarType(AIdVarType node)
    {
        inAIdVarType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVarType(node);
    }

    public void inAArrayVarType(AArrayVarType node)
    {
        defaultIn(node);
    }

    public void outAArrayVarType(AArrayVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayVarType(AArrayVarType node)
    {
        inAArrayVarType(node);
        if(node.getArrayVarType() != null)
        {
            node.getArrayVarType().apply(this);
        }
        outAArrayVarType(node);
    }

    public void inATest2ArrayVarType(ATest2ArrayVarType node)
    {
        defaultIn(node);
    }

    public void outATest2ArrayVarType(ATest2ArrayVarType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATest2ArrayVarType(ATest2ArrayVarType node)
    {
        inATest2ArrayVarType(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        outATest2ArrayVarType(node);
    }

    public void inAStatementList(AStatementList node)
    {
        defaultIn(node);
    }

    public void outAStatementList(AStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementList(AStatementList node)
    {
        inAStatementList(node);
        {
            List<PStatementHead> copy = new ArrayList<PStatementHead>(node.getStatementHead());
            Collections.reverse(copy);
            for(PStatementHead e : copy)
            {
                e.apply(this);
            }
        }
        outAStatementList(node);
    }

    public void inAStatementHead(AStatementHead node)
    {
        defaultIn(node);
    }

    public void outAStatementHead(AStatementHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementHead(AStatementHead node)
    {
        inAStatementHead(node);
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementHead(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getAssignmentStatement() != null)
        {
            node.getAssignmentStatement().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inALoopStatement(ALoopStatement node)
    {
        defaultIn(node);
    }

    public void outALoopStatement(ALoopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopStatement(ALoopStatement node)
    {
        inALoopStatement(node);
        if(node.getLoopStatement() != null)
        {
            node.getLoopStatement().apply(this);
        }
        outALoopStatement(node);
    }

    public void inACallStatement(ACallStatement node)
    {
        defaultIn(node);
    }

    public void outACallStatement(ACallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStatement(ACallStatement node)
    {
        inACallStatement(node);
        if(node.getCallStatement() != null)
        {
            node.getCallStatement().apply(this);
        }
        outACallStatement(node);
    }

    public void inATest3AssignmentStatement(ATest3AssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outATest3AssignmentStatement(ATest3AssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATest3AssignmentStatement(ATest3AssignmentStatement node)
    {
        inATest3AssignmentStatement(node);
        if(node.getVarInstantiation() != null)
        {
            node.getVarInstantiation().apply(this);
        }
        {
            List<PBracketOperation> copy = new ArrayList<PBracketOperation>(node.getBracketOperation());
            Collections.reverse(copy);
            for(PBracketOperation e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outATest3AssignmentStatement(node);
    }

    public void inATest4IfStatement(ATest4IfStatement node)
    {
        defaultIn(node);
    }

    public void outATest4IfStatement(ATest4IfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATest4IfStatement(ATest4IfStatement node)
    {
        inATest4IfStatement(node);
        if(node.getIfEnd() != null)
        {
            node.getIfEnd().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getIfStatementElse() != null)
        {
            node.getIfStatementElse().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getBeginIf() != null)
        {
            node.getBeginIf().apply(this);
        }
        outATest4IfStatement(node);
    }

    public void inAIfStatementElse(AIfStatementElse node)
    {
        defaultIn(node);
    }

    public void outAIfStatementElse(AIfStatementElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementElse(AIfStatementElse node)
    {
        inAIfStatementElse(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfStatementElse(node);
    }

    public void inATest5LoopStatement(ATest5LoopStatement node)
    {
        defaultIn(node);
    }

    public void outATest5LoopStatement(ATest5LoopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATest5LoopStatement(ATest5LoopStatement node)
    {
        inATest5LoopStatement(node);
        if(node.getLoopEnd() != null)
        {
            node.getLoopEnd().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        {
            List<TEol> copy = new ArrayList<TEol>(node.getEol());
            Collections.reverse(copy);
            for(TEol e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLoopBegin() != null)
        {
            node.getLoopBegin().apply(this);
        }
        outATest5LoopStatement(node);
    }

    public void inAObjectCallStatement(AObjectCallStatement node)
    {
        defaultIn(node);
    }

    public void outAObjectCallStatement(AObjectCallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectCallStatement(AObjectCallStatement node)
    {
        inAObjectCallStatement(node);
        if(node.getObjectCall() != null)
        {
            node.getObjectCall().apply(this);
        }
        outAObjectCallStatement(node);
    }

    public void inANormalCallStatement(ANormalCallStatement node)
    {
        defaultIn(node);
    }

    public void outANormalCallStatement(ANormalCallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalCallStatement(ANormalCallStatement node)
    {
        inANormalCallStatement(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outANormalCallStatement(node);
    }

    public void inAExpressionList(AExpressionList node)
    {
        defaultIn(node);
    }

    public void outAExpressionList(AExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionList(AExpressionList node)
    {
        inAExpressionList(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        {
            List<PExpressionHead> copy = new ArrayList<PExpressionHead>(node.getExpressionHead());
            Collections.reverse(copy);
            for(PExpressionHead e : copy)
            {
                e.apply(this);
            }
        }
        outAExpressionList(node);
    }

    public void inAExpressionHead(AExpressionHead node)
    {
        defaultIn(node);
    }

    public void outAExpressionHead(AExpressionHead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionHead(AExpressionHead node)
    {
        inAExpressionHead(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionHead(node);
    }

    public void inANegateUnaryOperator(ANegateUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outANegateUnaryOperator(ANegateUnaryOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegateUnaryOperator(ANegateUnaryOperator node)
    {
        inANegateUnaryOperator(node);
        if(node.getMinusOp() != null)
        {
            node.getMinusOp().apply(this);
        }
        outANegateUnaryOperator(node);
    }

    public void inANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotUnaryOperator(ANotUnaryOperator node)
    {
        inANotUnaryOperator(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryOperator(node);
    }

    public void inAMultiplyMultOperator(AMultiplyMultOperator node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMultOperator(AMultiplyMultOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyMultOperator(AMultiplyMultOperator node)
    {
        inAMultiplyMultOperator(node);
        if(node.getMultOp() != null)
        {
            node.getMultOp().apply(this);
        }
        outAMultiplyMultOperator(node);
    }

    public void inADivideMultOperator(ADivideMultOperator node)
    {
        defaultIn(node);
    }

    public void outADivideMultOperator(ADivideMultOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideMultOperator(ADivideMultOperator node)
    {
        inADivideMultOperator(node);
        if(node.getDivOp() != null)
        {
            node.getDivOp().apply(this);
        }
        outADivideMultOperator(node);
    }

    public void inAAddAddOperator(AAddAddOperator node)
    {
        defaultIn(node);
    }

    public void outAAddAddOperator(AAddAddOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddAddOperator(AAddAddOperator node)
    {
        inAAddAddOperator(node);
        if(node.getPlusOp() != null)
        {
            node.getPlusOp().apply(this);
        }
        outAAddAddOperator(node);
    }

    public void inASubtractAddOperator(ASubtractAddOperator node)
    {
        defaultIn(node);
    }

    public void outASubtractAddOperator(ASubtractAddOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractAddOperator(ASubtractAddOperator node)
    {
        inASubtractAddOperator(node);
        if(node.getMinusOp() != null)
        {
            node.getMinusOp().apply(this);
        }
        outASubtractAddOperator(node);
    }

    public void inAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualRelationalOperator(AEqualRelationalOperator node)
    {
        inAEqualRelationalOperator(node);
        if(node.getEqOp() != null)
        {
            node.getEqOp().apply(this);
        }
        outAEqualRelationalOperator(node);
    }

    public void inAGreaterRelationalOperator(AGreaterRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterRelationalOperator(AGreaterRelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterRelationalOperator(AGreaterRelationalOperator node)
    {
        inAGreaterRelationalOperator(node);
        if(node.getGtOp() != null)
        {
            node.getGtOp().apply(this);
        }
        outAGreaterRelationalOperator(node);
    }

    public void inAGreaterEqualRelationalOperator(AGreaterEqualRelationalOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualRelationalOperator(AGreaterEqualRelationalOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualRelationalOperator(AGreaterEqualRelationalOperator node)
    {
        inAGreaterEqualRelationalOperator(node);
        if(node.getGteOp() != null)
        {
            node.getGteOp().apply(this);
        }
        outAGreaterEqualRelationalOperator(node);
    }

    public void inAObjectCall(AObjectCall node)
    {
        defaultIn(node);
    }

    public void outAObjectCall(AObjectCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectCall(AObjectCall node)
    {
        inAObjectCall(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        if(node.getPeriod() != null)
        {
            node.getPeriod().apply(this);
        }
        if(node.getObjectCallExpression() != null)
        {
            node.getObjectCallExpression().apply(this);
        }
        outAObjectCall(node);
    }

    public void inAMethodCall(AMethodCall node)
    {
        defaultIn(node);
    }

    public void outAMethodCall(AMethodCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCall(AMethodCall node)
    {
        inAMethodCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMethodCall(node);
    }

    public void inABracketOperation(ABracketOperation node)
    {
        defaultIn(node);
    }

    public void outABracketOperation(ABracketOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABracketOperation(ABracketOperation node)
    {
        inABracketOperation(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outABracketOperation(node);
    }

    public void inAGetAtReference(AGetAtReference node)
    {
        defaultIn(node);
    }

    public void outAGetAtReference(AGetAtReference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGetAtReference(AGetAtReference node)
    {
        inAGetAtReference(node);
        if(node.getBracketOperation() != null)
        {
            node.getBracketOperation().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAGetAtReference(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getOrExpression() != null)
        {
            node.getOrExpression().apply(this);
        }
        outAExpression(node);
    }

    public void inAOrOrExpression(AOrOrExpression node)
    {
        defaultIn(node);
    }

    public void outAOrOrExpression(AOrOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrOrExpression(AOrOrExpression node)
    {
        inAOrOrExpression(node);
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getOrExpression() != null)
        {
            node.getOrExpression().apply(this);
        }
        outAOrOrExpression(node);
    }

    public void inAExpr1OrExpression(AExpr1OrExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr1OrExpression(AExpr1OrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr1OrExpression(AExpr1OrExpression node)
    {
        inAExpr1OrExpression(node);
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        outAExpr1OrExpression(node);
    }

    public void inAAndAndExpression(AAndAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndAndExpression(AAndAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAndExpression(AAndAndExpression node)
    {
        inAAndAndExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getAndExpression() != null)
        {
            node.getAndExpression().apply(this);
        }
        outAAndAndExpression(node);
    }

    public void inAExpr2AndExpression(AExpr2AndExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr2AndExpression(AExpr2AndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr2AndExpression(AExpr2AndExpression node)
    {
        inAExpr2AndExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outAExpr2AndExpression(node);
    }

    public void inARelationalRelationalExpression(ARelationalRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outARelationalRelationalExpression(ARelationalRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationalRelationalExpression(ARelationalRelationalExpression node)
    {
        inARelationalRelationalExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getRelationalOperator() != null)
        {
            node.getRelationalOperator().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outARelationalRelationalExpression(node);
    }

    public void inAExpr3RelationalExpression(AExpr3RelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr3RelationalExpression(AExpr3RelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr3RelationalExpression(AExpr3RelationalExpression node)
    {
        inAExpr3RelationalExpression(node);
        if(node.getConcatExpression() != null)
        {
            node.getConcatExpression().apply(this);
        }
        outAExpr3RelationalExpression(node);
    }

    public void inAConcatConcatExpression(AConcatConcatExpression node)
    {
        defaultIn(node);
    }

    public void outAConcatConcatExpression(AConcatConcatExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatConcatExpression(AConcatConcatExpression node)
    {
        inAConcatConcatExpression(node);
        if(node.getAddExpression() != null)
        {
            node.getAddExpression().apply(this);
        }
        if(node.getConcatOp() != null)
        {
            node.getConcatOp().apply(this);
        }
        if(node.getConcatExpression() != null)
        {
            node.getConcatExpression().apply(this);
        }
        outAConcatConcatExpression(node);
    }

    public void inAExpr4ConcatExpression(AExpr4ConcatExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr4ConcatExpression(AExpr4ConcatExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr4ConcatExpression(AExpr4ConcatExpression node)
    {
        inAExpr4ConcatExpression(node);
        if(node.getAddExpression() != null)
        {
            node.getAddExpression().apply(this);
        }
        outAExpr4ConcatExpression(node);
    }

    public void inAAddAddExpression(AAddAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddAddExpression(AAddAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddAddExpression(AAddAddExpression node)
    {
        inAAddAddExpression(node);
        if(node.getMultExpression() != null)
        {
            node.getMultExpression().apply(this);
        }
        if(node.getAddOperator() != null)
        {
            node.getAddOperator().apply(this);
        }
        if(node.getAddExpression() != null)
        {
            node.getAddExpression().apply(this);
        }
        outAAddAddExpression(node);
    }

    public void inAExpr5AddExpression(AExpr5AddExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr5AddExpression(AExpr5AddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr5AddExpression(AExpr5AddExpression node)
    {
        inAExpr5AddExpression(node);
        if(node.getMultExpression() != null)
        {
            node.getMultExpression().apply(this);
        }
        outAExpr5AddExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getCallExpression() != null)
        {
            node.getCallExpression().apply(this);
        }
        if(node.getMultOperator() != null)
        {
            node.getMultOperator().apply(this);
        }
        if(node.getMultExpression() != null)
        {
            node.getMultExpression().apply(this);
        }
        outAMultExpression(node);
    }

    public void inAExpr6MultExpression(AExpr6MultExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr6MultExpression(AExpr6MultExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr6MultExpression(AExpr6MultExpression node)
    {
        inAExpr6MultExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAExpr6MultExpression(node);
    }

    public void inAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        inAUnaryUnaryExpression(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        if(node.getUnaryOperator() != null)
        {
            node.getUnaryOperator().apply(this);
        }
        outAUnaryUnaryExpression(node);
    }

    public void inAExpr7UnaryExpression(AExpr7UnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr7UnaryExpression(AExpr7UnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr7UnaryExpression(AExpr7UnaryExpression node)
    {
        inAExpr7UnaryExpression(node);
        if(node.getObjectCallExpression() != null)
        {
            node.getObjectCallExpression().apply(this);
        }
        outAExpr7UnaryExpression(node);
    }

    public void inAGetAtObjectCallExpression(AGetAtObjectCallExpression node)
    {
        defaultIn(node);
    }

    public void outAGetAtObjectCallExpression(AGetAtObjectCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGetAtObjectCallExpression(AGetAtObjectCallExpression node)
    {
        inAGetAtObjectCallExpression(node);
        if(node.getGetAtReference() != null)
        {
            node.getGetAtReference().apply(this);
        }
        outAGetAtObjectCallExpression(node);
    }

    public void inACallObjectCallExpression(ACallObjectCallExpression node)
    {
        defaultIn(node);
    }

    public void outACallObjectCallExpression(ACallObjectCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallObjectCallExpression(ACallObjectCallExpression node)
    {
        inACallObjectCallExpression(node);
        if(node.getObjectCall() != null)
        {
            node.getObjectCall().apply(this);
        }
        outACallObjectCallExpression(node);
    }

    public void inAExpr8ObjectCallExpression(AExpr8ObjectCallExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr8ObjectCallExpression(AExpr8ObjectCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr8ObjectCallExpression(AExpr8ObjectCallExpression node)
    {
        inAExpr8ObjectCallExpression(node);
        if(node.getCallExpression() != null)
        {
            node.getCallExpression().apply(this);
        }
        outAExpr8ObjectCallExpression(node);
    }

    public void inACallCallExpression(ACallCallExpression node)
    {
        defaultIn(node);
    }

    public void outACallCallExpression(ACallCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallCallExpression(ACallCallExpression node)
    {
        inACallCallExpression(node);
        if(node.getMethodCall() != null)
        {
            node.getMethodCall().apply(this);
        }
        outACallCallExpression(node);
    }

    public void inAExpr8CallExpression(AExpr8CallExpression node)
    {
        defaultIn(node);
    }

    public void outAExpr8CallExpression(AExpr8CallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr8CallExpression(AExpr8CallExpression node)
    {
        inAExpr8CallExpression(node);
        if(node.getRealExpression() != null)
        {
            node.getRealExpression().apply(this);
        }
        outAExpr8CallExpression(node);
    }

    public void inAIdRealExpression(AIdRealExpression node)
    {
        defaultIn(node);
    }

    public void outAIdRealExpression(AIdRealExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdRealExpression(AIdRealExpression node)
    {
        inAIdRealExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdRealExpression(node);
    }

    public void inAStringRealExpression(AStringRealExpression node)
    {
        defaultIn(node);
    }

    public void outAStringRealExpression(AStringRealExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringRealExpression(AStringRealExpression node)
    {
        inAStringRealExpression(node);
        if(node.getStrlit() != null)
        {
            node.getStrlit().apply(this);
        }
        outAStringRealExpression(node);
    }

    public void inAIntRealExpression(AIntRealExpression node)
    {
        defaultIn(node);
    }

    public void outAIntRealExpression(AIntRealExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntRealExpression(AIntRealExpression node)
    {
        inAIntRealExpression(node);
        if(node.getIntlit() != null)
        {
            node.getIntlit().apply(this);
        }
        outAIntRealExpression(node);
    }

    public void inATrueRealExpression(ATrueRealExpression node)
    {
        defaultIn(node);
    }

    public void outATrueRealExpression(ATrueRealExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueRealExpression(ATrueRealExpression node)
    {
        inATrueRealExpression(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueRealExpression(node);
    }

    public void inAFalseRealExpression(AFalseRealExpression node)
    {
        defaultIn(node);
    }

    public void outAFalseRealExpression(AFalseRealExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseRealExpression(AFalseRealExpression node)
    {
        inAFalseRealExpression(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseRealExpression(node);
    }

    public void inANullRealExpression(ANullRealExpression node)
    {
        defaultIn(node);
    }

    public void outANullRealExpression(ANullRealExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullRealExpression(ANullRealExpression node)
    {
        inANullRealExpression(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullRealExpression(node);
    }

    public void inAMeRealExpression(AMeRealExpression node)
    {
        defaultIn(node);
    }

    public void outAMeRealExpression(AMeRealExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeRealExpression(AMeRealExpression node)
    {
        inAMeRealExpression(node);
        if(node.getMe() != null)
        {
            node.getMe().apply(this);
        }
        outAMeRealExpression(node);
    }

    public void inANewRealExpression(ANewRealExpression node)
    {
        defaultIn(node);
    }

    public void outANewRealExpression(ANewRealExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewRealExpression(ANewRealExpression node)
    {
        inANewRealExpression(node);
        if(node.getVarType() != null)
        {
            node.getVarType().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outANewRealExpression(node);
    }
}
