/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AArgumentList extends PArgumentList
{
    private final LinkedList<PArgumentDeclarationHead> _argumentDeclarationHead_ = new LinkedList<PArgumentDeclarationHead>();
    private PArgumentDeclaration _argumentDeclaration_;

    public AArgumentList()
    {
        // Constructor
    }

    public AArgumentList(
        @SuppressWarnings("hiding") List<PArgumentDeclarationHead> _argumentDeclarationHead_,
        @SuppressWarnings("hiding") PArgumentDeclaration _argumentDeclaration_)
    {
        // Constructor
        setArgumentDeclarationHead(_argumentDeclarationHead_);

        setArgumentDeclaration(_argumentDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new AArgumentList(
            cloneList(this._argumentDeclarationHead_),
            cloneNode(this._argumentDeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgumentList(this);
    }

    public LinkedList<PArgumentDeclarationHead> getArgumentDeclarationHead()
    {
        return this._argumentDeclarationHead_;
    }

    public void setArgumentDeclarationHead(List<PArgumentDeclarationHead> list)
    {
        this._argumentDeclarationHead_.clear();
        this._argumentDeclarationHead_.addAll(list);
        for(PArgumentDeclarationHead e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PArgumentDeclaration getArgumentDeclaration()
    {
        return this._argumentDeclaration_;
    }

    public void setArgumentDeclaration(PArgumentDeclaration node)
    {
        if(this._argumentDeclaration_ != null)
        {
            this._argumentDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._argumentDeclarationHead_)
            + toString(this._argumentDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._argumentDeclarationHead_.remove(child))
        {
            return;
        }

        if(this._argumentDeclaration_ == child)
        {
            this._argumentDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PArgumentDeclarationHead> i = this._argumentDeclarationHead_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArgumentDeclarationHead) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._argumentDeclaration_ == oldChild)
        {
            setArgumentDeclaration((PArgumentDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
