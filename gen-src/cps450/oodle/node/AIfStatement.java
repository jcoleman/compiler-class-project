/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AIfStatement extends PStatement
{
    private TIf _if_;
    private PExpression _expression_;
    private final LinkedList<PStatement> _trueCase_ = new LinkedList<PStatement>();
    private PElseHelper _elseHelper_;
    private final LinkedList<PStatement> _falseCase_ = new LinkedList<PStatement>();

    public AIfStatement()
    {
        // Constructor
    }

    public AIfStatement(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") List<PStatement> _trueCase_,
        @SuppressWarnings("hiding") PElseHelper _elseHelper_,
        @SuppressWarnings("hiding") List<PStatement> _falseCase_)
    {
        // Constructor
        setIf(_if_);

        setExpression(_expression_);

        setTrueCase(_trueCase_);

        setElseHelper(_elseHelper_);

        setFalseCase(_falseCase_);

    }

    @Override
    public Object clone()
    {
        return new AIfStatement(
            cloneNode(this._if_),
            cloneNode(this._expression_),
            cloneList(this._trueCase_),
            cloneNode(this._elseHelper_),
            cloneList(this._falseCase_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfStatement(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public LinkedList<PStatement> getTrueCase()
    {
        return this._trueCase_;
    }

    public void setTrueCase(List<PStatement> list)
    {
        this._trueCase_.clear();
        this._trueCase_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PElseHelper getElseHelper()
    {
        return this._elseHelper_;
    }

    public void setElseHelper(PElseHelper node)
    {
        if(this._elseHelper_ != null)
        {
            this._elseHelper_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseHelper_ = node;
    }

    public LinkedList<PStatement> getFalseCase()
    {
        return this._falseCase_;
    }

    public void setFalseCase(List<PStatement> list)
    {
        this._falseCase_.clear();
        this._falseCase_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._expression_)
            + toString(this._trueCase_)
            + toString(this._elseHelper_)
            + toString(this._falseCase_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._trueCase_.remove(child))
        {
            return;
        }

        if(this._elseHelper_ == child)
        {
            this._elseHelper_ = null;
            return;
        }

        if(this._falseCase_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator<PStatement> i = this._trueCase_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._elseHelper_ == oldChild)
        {
            setElseHelper((PElseHelper) newChild);
            return;
        }

        for(ListIterator<PStatement> i = this._falseCase_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
