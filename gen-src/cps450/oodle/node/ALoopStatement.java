/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class ALoopStatement extends PStatement
{
    private TLoop _loop_;
    private PExpression _case_;
    private PLoopHelper _loopHelper_;
    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();

    public ALoopStatement()
    {
        // Constructor
    }

    public ALoopStatement(
        @SuppressWarnings("hiding") TLoop _loop_,
        @SuppressWarnings("hiding") PExpression _case_,
        @SuppressWarnings("hiding") PLoopHelper _loopHelper_,
        @SuppressWarnings("hiding") List<PStatement> _statement_)
    {
        // Constructor
        setLoop(_loop_);

        setCase(_case_);

        setLoopHelper(_loopHelper_);

        setStatement(_statement_);

    }

    @Override
    public Object clone()
    {
        return new ALoopStatement(
            cloneNode(this._loop_),
            cloneNode(this._case_),
            cloneNode(this._loopHelper_),
            cloneList(this._statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALoopStatement(this);
    }

    public TLoop getLoop()
    {
        return this._loop_;
    }

    public void setLoop(TLoop node)
    {
        if(this._loop_ != null)
        {
            this._loop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._loop_ = node;
    }

    public PExpression getCase()
    {
        return this._case_;
    }

    public void setCase(PExpression node)
    {
        if(this._case_ != null)
        {
            this._case_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._case_ = node;
    }

    public PLoopHelper getLoopHelper()
    {
        return this._loopHelper_;
    }

    public void setLoopHelper(PLoopHelper node)
    {
        if(this._loopHelper_ != null)
        {
            this._loopHelper_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._loopHelper_ = node;
    }

    public LinkedList<PStatement> getStatement()
    {
        return this._statement_;
    }

    public void setStatement(List<PStatement> list)
    {
        this._statement_.clear();
        this._statement_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._loop_)
            + toString(this._case_)
            + toString(this._loopHelper_)
            + toString(this._statement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._loop_ == child)
        {
            this._loop_ = null;
            return;
        }

        if(this._case_ == child)
        {
            this._case_ = null;
            return;
        }

        if(this._loopHelper_ == child)
        {
            this._loopHelper_ = null;
            return;
        }

        if(this._statement_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._loop_ == oldChild)
        {
            setLoop((TLoop) newChild);
            return;
        }

        if(this._case_ == oldChild)
        {
            setCase((PExpression) newChild);
            return;
        }

        if(this._loopHelper_ == oldChild)
        {
            setLoopHelper((PLoopHelper) newChild);
            return;
        }

        for(ListIterator<PStatement> i = this._statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
