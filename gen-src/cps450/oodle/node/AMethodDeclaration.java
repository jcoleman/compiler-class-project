/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AMethodDeclaration extends PMethodDeclaration
{
    private TId _beginName_;
    private final LinkedList<PArgumentDeclaration> _argumentDeclaration_ = new LinkedList<PArgumentDeclaration>();
    private PType _type_;
    private final LinkedList<PVarDeclaration> _varDeclaration_ = new LinkedList<PVarDeclaration>();
    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();
    private TId _endName_;

    public AMethodDeclaration()
    {
        // Constructor
    }

    public AMethodDeclaration(
        @SuppressWarnings("hiding") TId _beginName_,
        @SuppressWarnings("hiding") List<PArgumentDeclaration> _argumentDeclaration_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") List<PVarDeclaration> _varDeclaration_,
        @SuppressWarnings("hiding") List<PStatement> _statement_,
        @SuppressWarnings("hiding") TId _endName_)
    {
        // Constructor
        setBeginName(_beginName_);

        setArgumentDeclaration(_argumentDeclaration_);

        setType(_type_);

        setVarDeclaration(_varDeclaration_);

        setStatement(_statement_);

        setEndName(_endName_);

    }

    @Override
    public Object clone()
    {
        return new AMethodDeclaration(
            cloneNode(this._beginName_),
            cloneList(this._argumentDeclaration_),
            cloneNode(this._type_),
            cloneList(this._varDeclaration_),
            cloneList(this._statement_),
            cloneNode(this._endName_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodDeclaration(this);
    }

    public TId getBeginName()
    {
        return this._beginName_;
    }

    public void setBeginName(TId node)
    {
        if(this._beginName_ != null)
        {
            this._beginName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beginName_ = node;
    }

    public LinkedList<PArgumentDeclaration> getArgumentDeclaration()
    {
        return this._argumentDeclaration_;
    }

    public void setArgumentDeclaration(List<PArgumentDeclaration> list)
    {
        this._argumentDeclaration_.clear();
        this._argumentDeclaration_.addAll(list);
        for(PArgumentDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public LinkedList<PVarDeclaration> getVarDeclaration()
    {
        return this._varDeclaration_;
    }

    public void setVarDeclaration(List<PVarDeclaration> list)
    {
        this._varDeclaration_.clear();
        this._varDeclaration_.addAll(list);
        for(PVarDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PStatement> getStatement()
    {
        return this._statement_;
    }

    public void setStatement(List<PStatement> list)
    {
        this._statement_.clear();
        this._statement_.addAll(list);
        for(PStatement e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TId getEndName()
    {
        return this._endName_;
    }

    public void setEndName(TId node)
    {
        if(this._endName_ != null)
        {
            this._endName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endName_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._beginName_)
            + toString(this._argumentDeclaration_)
            + toString(this._type_)
            + toString(this._varDeclaration_)
            + toString(this._statement_)
            + toString(this._endName_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._beginName_ == child)
        {
            this._beginName_ = null;
            return;
        }

        if(this._argumentDeclaration_.remove(child))
        {
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._varDeclaration_.remove(child))
        {
            return;
        }

        if(this._statement_.remove(child))
        {
            return;
        }

        if(this._endName_ == child)
        {
            this._endName_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._beginName_ == oldChild)
        {
            setBeginName((TId) newChild);
            return;
        }

        for(ListIterator<PArgumentDeclaration> i = this._argumentDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PArgumentDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        for(ListIterator<PVarDeclaration> i = this._varDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStatement> i = this._statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endName_ == oldChild)
        {
            setEndName((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
