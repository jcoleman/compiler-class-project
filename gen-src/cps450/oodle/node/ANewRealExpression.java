/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class ANewRealExpression extends PRealExpression
{
    private TNew _new_;
    private PVarType _varType_;

    public ANewRealExpression()
    {
        // Constructor
    }

    public ANewRealExpression(
        @SuppressWarnings("hiding") TNew _new_,
        @SuppressWarnings("hiding") PVarType _varType_)
    {
        // Constructor
        setNew(_new_);

        setVarType(_varType_);

    }

    @Override
    public Object clone()
    {
        return new ANewRealExpression(
            cloneNode(this._new_),
            cloneNode(this._varType_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANewRealExpression(this);
    }

    public TNew getNew()
    {
        return this._new_;
    }

    public void setNew(TNew node)
    {
        if(this._new_ != null)
        {
            this._new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._new_ = node;
    }

    public PVarType getVarType()
    {
        return this._varType_;
    }

    public void setVarType(PVarType node)
    {
        if(this._varType_ != null)
        {
            this._varType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._new_)
            + toString(this._varType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._new_ == child)
        {
            this._new_ = null;
            return;
        }

        if(this._varType_ == child)
        {
            this._varType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._new_ == oldChild)
        {
            setNew((TNew) newChild);
            return;
        }

        if(this._varType_ == oldChild)
        {
            setVarType((PVarType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
