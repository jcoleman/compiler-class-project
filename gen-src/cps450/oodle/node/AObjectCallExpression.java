/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AObjectCallExpression extends PExpression
{
    private PExpression _object_;
    private PExpression _methodCall_;

    public AObjectCallExpression()
    {
        // Constructor
    }

    public AObjectCallExpression(
        @SuppressWarnings("hiding") PExpression _object_,
        @SuppressWarnings("hiding") PExpression _methodCall_)
    {
        // Constructor
        setObject(_object_);

        setMethodCall(_methodCall_);

    }

    @Override
    public Object clone()
    {
        return new AObjectCallExpression(
            cloneNode(this._object_),
            cloneNode(this._methodCall_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAObjectCallExpression(this);
    }

    public PExpression getObject()
    {
        return this._object_;
    }

    public void setObject(PExpression node)
    {
        if(this._object_ != null)
        {
            this._object_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._object_ = node;
    }

    public PExpression getMethodCall()
    {
        return this._methodCall_;
    }

    public void setMethodCall(PExpression node)
    {
        if(this._methodCall_ != null)
        {
            this._methodCall_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._methodCall_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._object_)
            + toString(this._methodCall_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._object_ == child)
        {
            this._object_ = null;
            return;
        }

        if(this._methodCall_ == child)
        {
            this._methodCall_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._object_ == oldChild)
        {
            setObject((PExpression) newChild);
            return;
        }

        if(this._methodCall_ == oldChild)
        {
            setMethodCall((PExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
