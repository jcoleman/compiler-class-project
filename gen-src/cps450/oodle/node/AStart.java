/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AStart extends PStart
{
    private final LinkedList<TEol> _begin_ = new LinkedList<TEol>();
    private PClassDef _classDef_;
    private final LinkedList<PClassTail> _classTail_ = new LinkedList<PClassTail>();
    private final LinkedList<TEol> _end_ = new LinkedList<TEol>();

    public AStart()
    {
        // Constructor
    }

    public AStart(
        @SuppressWarnings("hiding") List<TEol> _begin_,
        @SuppressWarnings("hiding") PClassDef _classDef_,
        @SuppressWarnings("hiding") List<PClassTail> _classTail_,
        @SuppressWarnings("hiding") List<TEol> _end_)
    {
        // Constructor
        setBegin(_begin_);

        setClassDef(_classDef_);

        setClassTail(_classTail_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AStart(
            cloneList(this._begin_),
            cloneNode(this._classDef_),
            cloneList(this._classTail_),
            cloneList(this._end_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStart(this);
    }

    public LinkedList<TEol> getBegin()
    {
        return this._begin_;
    }

    public void setBegin(List<TEol> list)
    {
        this._begin_.clear();
        this._begin_.addAll(list);
        for(TEol e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PClassDef getClassDef()
    {
        return this._classDef_;
    }

    public void setClassDef(PClassDef node)
    {
        if(this._classDef_ != null)
        {
            this._classDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classDef_ = node;
    }

    public LinkedList<PClassTail> getClassTail()
    {
        return this._classTail_;
    }

    public void setClassTail(List<PClassTail> list)
    {
        this._classTail_.clear();
        this._classTail_.addAll(list);
        for(PClassTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TEol> getEnd()
    {
        return this._end_;
    }

    public void setEnd(List<TEol> list)
    {
        this._end_.clear();
        this._end_.addAll(list);
        for(TEol e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._begin_)
            + toString(this._classDef_)
            + toString(this._classTail_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._begin_.remove(child))
        {
            return;
        }

        if(this._classDef_ == child)
        {
            this._classDef_ = null;
            return;
        }

        if(this._classTail_.remove(child))
        {
            return;
        }

        if(this._end_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TEol> i = this._begin_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TEol) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._classDef_ == oldChild)
        {
            setClassDef((PClassDef) newChild);
            return;
        }

        for(ListIterator<PClassTail> i = this._classTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PClassTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TEol> i = this._end_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TEol) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
