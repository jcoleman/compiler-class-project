/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class AStart extends PStart
{
    private final LinkedList<TEol> _eol_ = new LinkedList<TEol>();
    private final LinkedList<PClassDef> _classDef_ = new LinkedList<PClassDef>();

    public AStart()
    {
        // Constructor
    }

    public AStart(
        @SuppressWarnings("hiding") List<TEol> _eol_,
        @SuppressWarnings("hiding") List<PClassDef> _classDef_)
    {
        // Constructor
        setEol(_eol_);

        setClassDef(_classDef_);

    }

    @Override
    public Object clone()
    {
        return new AStart(
            cloneList(this._eol_),
            cloneList(this._classDef_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStart(this);
    }

    public LinkedList<TEol> getEol()
    {
        return this._eol_;
    }

    public void setEol(List<TEol> list)
    {
        this._eol_.clear();
        this._eol_.addAll(list);
        for(TEol e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PClassDef> getClassDef()
    {
        return this._classDef_;
    }

    public void setClassDef(List<PClassDef> list)
    {
        this._classDef_.clear();
        this._classDef_.addAll(list);
        for(PClassDef e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._eol_)
            + toString(this._classDef_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._eol_.remove(child))
        {
            return;
        }

        if(this._classDef_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TEol> i = this._eol_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TEol) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PClassDef> i = this._classDef_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PClassDef) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
