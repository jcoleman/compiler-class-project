/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.node;

import java.util.*;
import cps450.oodle.analysis.*;

@SuppressWarnings("nls")
public final class ATest4IfStatement extends PIfStatement
{
    private TIf _beginIf_;
    private PExpression _expression_;
    private TThen _then_;
    private final LinkedList<TEol> _eol_ = new LinkedList<TEol>();
    private PStatementList _statementList_;
    private PIfStatementElse _ifStatementElse_;
    private TEnd _end_;
    private TIf _ifEnd_;

    public ATest4IfStatement()
    {
        // Constructor
    }

    public ATest4IfStatement(
        @SuppressWarnings("hiding") TIf _beginIf_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") List<TEol> _eol_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") PIfStatementElse _ifStatementElse_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TIf _ifEnd_)
    {
        // Constructor
        setBeginIf(_beginIf_);

        setExpression(_expression_);

        setThen(_then_);

        setEol(_eol_);

        setStatementList(_statementList_);

        setIfStatementElse(_ifStatementElse_);

        setEnd(_end_);

        setIfEnd(_ifEnd_);

    }

    @Override
    public Object clone()
    {
        return new ATest4IfStatement(
            cloneNode(this._beginIf_),
            cloneNode(this._expression_),
            cloneNode(this._then_),
            cloneList(this._eol_),
            cloneNode(this._statementList_),
            cloneNode(this._ifStatementElse_),
            cloneNode(this._end_),
            cloneNode(this._ifEnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATest4IfStatement(this);
    }

    public TIf getBeginIf()
    {
        return this._beginIf_;
    }

    public void setBeginIf(TIf node)
    {
        if(this._beginIf_ != null)
        {
            this._beginIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beginIf_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public LinkedList<TEol> getEol()
    {
        return this._eol_;
    }

    public void setEol(List<TEol> list)
    {
        this._eol_.clear();
        this._eol_.addAll(list);
        for(TEol e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public PIfStatementElse getIfStatementElse()
    {
        return this._ifStatementElse_;
    }

    public void setIfStatementElse(PIfStatementElse node)
    {
        if(this._ifStatementElse_ != null)
        {
            this._ifStatementElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifStatementElse_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TIf getIfEnd()
    {
        return this._ifEnd_;
    }

    public void setIfEnd(TIf node)
    {
        if(this._ifEnd_ != null)
        {
            this._ifEnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifEnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._beginIf_)
            + toString(this._expression_)
            + toString(this._then_)
            + toString(this._eol_)
            + toString(this._statementList_)
            + toString(this._ifStatementElse_)
            + toString(this._end_)
            + toString(this._ifEnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._beginIf_ == child)
        {
            this._beginIf_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._eol_.remove(child))
        {
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._ifStatementElse_ == child)
        {
            this._ifStatementElse_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._ifEnd_ == child)
        {
            this._ifEnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._beginIf_ == oldChild)
        {
            setBeginIf((TIf) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        for(ListIterator<TEol> i = this._eol_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TEol) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._ifStatementElse_ == oldChild)
        {
            setIfStatementElse((PIfStatementElse) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._ifEnd_ == oldChild)
        {
            setIfEnd((TIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
