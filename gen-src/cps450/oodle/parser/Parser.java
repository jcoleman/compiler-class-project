/* This file was generated by SableCC (http://www.sablecc.org/). */

package cps450.oodle.parser;

import cps450.oodle.lexer.*;
import cps450.oodle.node.*;
import cps450.oodle.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAstart1Start */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAstart2Start */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAstart3Start */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAstart4Start */
		    {
			ArrayList list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce AClassInheritance */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AAclassdef1ClassDef */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AAclassdef2ClassDef */
		    {
			ArrayList list = new6();
			push(goTo(2), list);
		    }
		    break;
                    case 7: /* reduce AAclassdef3ClassDef */
		    {
			ArrayList list = new7();
			push(goTo(2), list);
		    }
		    break;
                    case 8: /* reduce AAclassdef4ClassDef */
		    {
			ArrayList list = new8();
			push(goTo(2), list);
		    }
		    break;
                    case 9: /* reduce AAclassdef5ClassDef */
		    {
			ArrayList list = new9();
			push(goTo(2), list);
		    }
		    break;
                    case 10: /* reduce AAclassdef6ClassDef */
		    {
			ArrayList list = new10();
			push(goTo(2), list);
		    }
		    break;
                    case 11: /* reduce AAclassdef7ClassDef */
		    {
			ArrayList list = new11();
			push(goTo(2), list);
		    }
		    break;
                    case 12: /* reduce AAclassdef8ClassDef */
		    {
			ArrayList list = new12();
			push(goTo(2), list);
		    }
		    break;
                    case 13: /* reduce AAclassdef9ClassDef */
		    {
			ArrayList list = new13();
			push(goTo(2), list);
		    }
		    break;
                    case 14: /* reduce AAclassdef10ClassDef */
		    {
			ArrayList list = new14();
			push(goTo(2), list);
		    }
		    break;
                    case 15: /* reduce AAclassdef11ClassDef */
		    {
			ArrayList list = new15();
			push(goTo(2), list);
		    }
		    break;
                    case 16: /* reduce AAclassdef12ClassDef */
		    {
			ArrayList list = new16();
			push(goTo(2), list);
		    }
		    break;
                    case 17: /* reduce AAclassdef13ClassDef */
		    {
			ArrayList list = new17();
			push(goTo(2), list);
		    }
		    break;
                    case 18: /* reduce AAclassdef14ClassDef */
		    {
			ArrayList list = new18();
			push(goTo(2), list);
		    }
		    break;
                    case 19: /* reduce AAclassdef15ClassDef */
		    {
			ArrayList list = new19();
			push(goTo(2), list);
		    }
		    break;
                    case 20: /* reduce AAclassdef16ClassDef */
		    {
			ArrayList list = new20();
			push(goTo(2), list);
		    }
		    break;
                    case 21: /* reduce AAvardeclaration1VarDeclaration */
		    {
			ArrayList list = new21();
			push(goTo(3), list);
		    }
		    break;
                    case 22: /* reduce AAvardeclaration2VarDeclaration */
		    {
			ArrayList list = new22();
			push(goTo(3), list);
		    }
		    break;
                    case 23: /* reduce AAvardeclaration3VarDeclaration */
		    {
			ArrayList list = new23();
			push(goTo(3), list);
		    }
		    break;
                    case 24: /* reduce AAvardeclaration4VarDeclaration */
		    {
			ArrayList list = new24();
			push(goTo(3), list);
		    }
		    break;
                    case 25: /* reduce AVarTypeDeclaration */
		    {
			ArrayList list = new25();
			push(goTo(4), list);
		    }
		    break;
                    case 26: /* reduce AVarInstantiation */
		    {
			ArrayList list = new26();
			push(goTo(5), list);
		    }
		    break;
                    case 27: /* reduce AAmethoddeclaration1MethodDeclaration */
		    {
			ArrayList list = new27();
			push(goTo(6), list);
		    }
		    break;
                    case 28: /* reduce AAmethoddeclaration2MethodDeclaration */
		    {
			ArrayList list = new28();
			push(goTo(6), list);
		    }
		    break;
                    case 29: /* reduce AAmethoddeclaration3MethodDeclaration */
		    {
			ArrayList list = new29();
			push(goTo(6), list);
		    }
		    break;
                    case 30: /* reduce AAmethoddeclaration4MethodDeclaration */
		    {
			ArrayList list = new30();
			push(goTo(6), list);
		    }
		    break;
                    case 31: /* reduce AAmethoddeclaration5MethodDeclaration */
		    {
			ArrayList list = new31();
			push(goTo(6), list);
		    }
		    break;
                    case 32: /* reduce AAmethoddeclaration6MethodDeclaration */
		    {
			ArrayList list = new32();
			push(goTo(6), list);
		    }
		    break;
                    case 33: /* reduce AAmethoddeclaration7MethodDeclaration */
		    {
			ArrayList list = new33();
			push(goTo(6), list);
		    }
		    break;
                    case 34: /* reduce AAmethoddeclaration8MethodDeclaration */
		    {
			ArrayList list = new34();
			push(goTo(6), list);
		    }
		    break;
                    case 35: /* reduce AAmethoddeclaration9MethodDeclaration */
		    {
			ArrayList list = new35();
			push(goTo(6), list);
		    }
		    break;
                    case 36: /* reduce AAmethoddeclaration10MethodDeclaration */
		    {
			ArrayList list = new36();
			push(goTo(6), list);
		    }
		    break;
                    case 37: /* reduce AAmethoddeclaration11MethodDeclaration */
		    {
			ArrayList list = new37();
			push(goTo(6), list);
		    }
		    break;
                    case 38: /* reduce AAmethoddeclaration12MethodDeclaration */
		    {
			ArrayList list = new38();
			push(goTo(6), list);
		    }
		    break;
                    case 39: /* reduce AAmethoddeclaration13MethodDeclaration */
		    {
			ArrayList list = new39();
			push(goTo(6), list);
		    }
		    break;
                    case 40: /* reduce AAmethoddeclaration14MethodDeclaration */
		    {
			ArrayList list = new40();
			push(goTo(6), list);
		    }
		    break;
                    case 41: /* reduce AAmethoddeclaration15MethodDeclaration */
		    {
			ArrayList list = new41();
			push(goTo(6), list);
		    }
		    break;
                    case 42: /* reduce AAmethoddeclaration16MethodDeclaration */
		    {
			ArrayList list = new42();
			push(goTo(6), list);
		    }
		    break;
                    case 43: /* reduce AArgumentDeclarationHead */
		    {
			ArrayList list = new43();
			push(goTo(7), list);
		    }
		    break;
                    case 44: /* reduce AArgumentDeclaration */
		    {
			ArrayList list = new44();
			push(goTo(8), list);
		    }
		    break;
                    case 45: /* reduce AIntVarType */
		    {
			ArrayList list = new45();
			push(goTo(9), list);
		    }
		    break;
                    case 46: /* reduce AStringVarType */
		    {
			ArrayList list = new46();
			push(goTo(9), list);
		    }
		    break;
                    case 47: /* reduce ABooleanVarType */
		    {
			ArrayList list = new47();
			push(goTo(9), list);
		    }
		    break;
                    case 48: /* reduce AIdVarType */
		    {
			ArrayList list = new48();
			push(goTo(9), list);
		    }
		    break;
                    case 49: /* reduce AArrayVarType */
		    {
			ArrayList list = new49();
			push(goTo(9), list);
		    }
		    break;
                    case 50: /* reduce ATest2ArrayVarType */
		    {
			ArrayList list = new50();
			push(goTo(10), list);
		    }
		    break;
                    case 51: /* reduce AAstatementlist1StatementList */
		    {
			ArrayList list = new51();
			push(goTo(11), list);
		    }
		    break;
                    case 52: /* reduce AAstatementlist2StatementList */
		    {
			ArrayList list = new52();
			push(goTo(11), list);
		    }
		    break;
                    case 53: /* reduce AStatementHead */
		    {
			ArrayList list = new53();
			push(goTo(12), list);
		    }
		    break;
                    case 54: /* reduce AAssignmentStatement */
		    {
			ArrayList list = new54();
			push(goTo(13), list);
		    }
		    break;
                    case 55: /* reduce AIfStatement */
		    {
			ArrayList list = new55();
			push(goTo(13), list);
		    }
		    break;
                    case 56: /* reduce ALoopStatement */
		    {
			ArrayList list = new56();
			push(goTo(13), list);
		    }
		    break;
                    case 57: /* reduce ACallCaseStatement */
		    {
			ArrayList list = new57();
			push(goTo(13), list);
		    }
		    break;
                    case 58: /* reduce AAtest3assignmentstatement1AssignmentStatement */
		    {
			ArrayList list = new58();
			push(goTo(14), list);
		    }
		    break;
                    case 59: /* reduce AAtest3assignmentstatement2AssignmentStatement */
		    {
			ArrayList list = new59();
			push(goTo(14), list);
		    }
		    break;
                    case 60: /* reduce AElseHelper */
		    {
			ArrayList list = new60();
			push(goTo(15), list);
		    }
		    break;
                    case 61: /* reduce AAtest4ifstatement1IfStatement */
		    {
			ArrayList list = new61();
			push(goTo(16), list);
		    }
		    break;
                    case 62: /* reduce AAtest4ifstatement2IfStatement */
		    {
			ArrayList list = new62();
			push(goTo(16), list);
		    }
		    break;
                    case 63: /* reduce AIfStatementElse */
		    {
			ArrayList list = new63();
			push(goTo(17), list);
		    }
		    break;
                    case 64: /* reduce ATest5LoopStatement */
		    {
			ArrayList list = new64();
			push(goTo(18), list);
		    }
		    break;
                    case 65: /* reduce ACallStatement */
		    {
			ArrayList list = new65();
			push(goTo(19), list);
		    }
		    break;
                    case 66: /* reduce AAexpressionsexpressionlist1ExpressionList */
		    {
			ArrayList list = new66();
			push(goTo(20), list);
		    }
		    break;
                    case 67: /* reduce AAexpressionsexpressionlist2ExpressionList */
		    {
			ArrayList list = new67();
			push(goTo(20), list);
		    }
		    break;
                    case 68: /* reduce AEmptyExpressionListExpressionList */
		    {
			ArrayList list = new68();
			push(goTo(20), list);
		    }
		    break;
                    case 69: /* reduce AExpressionHead */
		    {
			ArrayList list = new69();
			push(goTo(21), list);
		    }
		    break;
                    case 70: /* reduce ANegateUnaryOperator */
		    {
			ArrayList list = new70();
			push(goTo(22), list);
		    }
		    break;
                    case 71: /* reduce APositiveUnaryOperator */
		    {
			ArrayList list = new71();
			push(goTo(22), list);
		    }
		    break;
                    case 72: /* reduce ANotUnaryOperator */
		    {
			ArrayList list = new72();
			push(goTo(22), list);
		    }
		    break;
                    case 73: /* reduce AMultiplyMultOperator */
		    {
			ArrayList list = new73();
			push(goTo(23), list);
		    }
		    break;
                    case 74: /* reduce ADivideMultOperator */
		    {
			ArrayList list = new74();
			push(goTo(23), list);
		    }
		    break;
                    case 75: /* reduce AAddAddOperator */
		    {
			ArrayList list = new75();
			push(goTo(24), list);
		    }
		    break;
                    case 76: /* reduce ASubtractAddOperator */
		    {
			ArrayList list = new76();
			push(goTo(24), list);
		    }
		    break;
                    case 77: /* reduce AEqualRelationalOperator */
		    {
			ArrayList list = new77();
			push(goTo(25), list);
		    }
		    break;
                    case 78: /* reduce AGreaterRelationalOperator */
		    {
			ArrayList list = new78();
			push(goTo(25), list);
		    }
		    break;
                    case 79: /* reduce AGreaterEqualRelationalOperator */
		    {
			ArrayList list = new79();
			push(goTo(25), list);
		    }
		    break;
                    case 80: /* reduce ABracketOperation */
		    {
			ArrayList list = new80();
			push(goTo(26), list);
		    }
		    break;
                    case 81: /* reduce AGetAtReference */
		    {
			ArrayList list = new81();
			push(goTo(27), list);
		    }
		    break;
                    case 82: /* reduce AObjectCall */
		    {
			ArrayList list = new82();
			push(goTo(28), list);
		    }
		    break;
                    case 83: /* reduce AAcallexpression1CallExpression */
		    {
			ArrayList list = new83();
			push(goTo(29), list);
		    }
		    break;
                    case 84: /* reduce AAcallexpression2CallExpression */
		    {
			ArrayList list = new84();
			push(goTo(29), list);
		    }
		    break;
                    case 85: /* reduce AExpression */
		    {
			ArrayList list = new85();
			push(goTo(30), list);
		    }
		    break;
                    case 86: /* reduce AOrOrExpression */
		    {
			ArrayList list = new86();
			push(goTo(31), list);
		    }
		    break;
                    case 87: /* reduce AExpr1OrExpression */
		    {
			ArrayList list = new87();
			push(goTo(31), list);
		    }
		    break;
                    case 88: /* reduce AAndAndExpression */
		    {
			ArrayList list = new88();
			push(goTo(32), list);
		    }
		    break;
                    case 89: /* reduce AExpr2AndExpression */
		    {
			ArrayList list = new89();
			push(goTo(32), list);
		    }
		    break;
                    case 90: /* reduce ARelationalRelationalExpression */
		    {
			ArrayList list = new90();
			push(goTo(33), list);
		    }
		    break;
                    case 91: /* reduce AExpr3RelationalExpression */
		    {
			ArrayList list = new91();
			push(goTo(33), list);
		    }
		    break;
                    case 92: /* reduce AConcatConcatExpression */
		    {
			ArrayList list = new92();
			push(goTo(34), list);
		    }
		    break;
                    case 93: /* reduce AExpr4ConcatExpression */
		    {
			ArrayList list = new93();
			push(goTo(34), list);
		    }
		    break;
                    case 94: /* reduce AAddAddExpression */
		    {
			ArrayList list = new94();
			push(goTo(35), list);
		    }
		    break;
                    case 95: /* reduce AExpr5AddExpression */
		    {
			ArrayList list = new95();
			push(goTo(35), list);
		    }
		    break;
                    case 96: /* reduce AMultMultExpression */
		    {
			ArrayList list = new96();
			push(goTo(36), list);
		    }
		    break;
                    case 97: /* reduce AExpr6MultExpression */
		    {
			ArrayList list = new97();
			push(goTo(36), list);
		    }
		    break;
                    case 98: /* reduce AUnaryUnaryExpression */
		    {
			ArrayList list = new98();
			push(goTo(37), list);
		    }
		    break;
                    case 99: /* reduce AExpr7UnaryExpression */
		    {
			ArrayList list = new99();
			push(goTo(37), list);
		    }
		    break;
                    case 100: /* reduce AGetAtObjectCallExpression */
		    {
			ArrayList list = new100();
			push(goTo(38), list);
		    }
		    break;
                    case 101: /* reduce ACallExprObjectCallExpression */
		    {
			ArrayList list = new101();
			push(goTo(38), list);
		    }
		    break;
                    case 102: /* reduce AExpr9ObjectCallExpression */
		    {
			ArrayList list = new102();
			push(goTo(38), list);
		    }
		    break;
                    case 103: /* reduce AGroupGroupExpression */
		    {
			ArrayList list = new103();
			push(goTo(39), list);
		    }
		    break;
                    case 104: /* reduce AExpr11GroupExpression */
		    {
			ArrayList list = new104();
			push(goTo(39), list);
		    }
		    break;
                    case 105: /* reduce AIdentifierRealExpression */
		    {
			ArrayList list = new105();
			push(goTo(40), list);
		    }
		    break;
                    case 106: /* reduce AStringRealExpression */
		    {
			ArrayList list = new106();
			push(goTo(40), list);
		    }
		    break;
                    case 107: /* reduce AIntRealExpression */
		    {
			ArrayList list = new107();
			push(goTo(40), list);
		    }
		    break;
                    case 108: /* reduce ATrueRealExpression */
		    {
			ArrayList list = new108();
			push(goTo(40), list);
		    }
		    break;
                    case 109: /* reduce AFalseRealExpression */
		    {
			ArrayList list = new109();
			push(goTo(40), list);
		    }
		    break;
                    case 110: /* reduce ANullRealExpression */
		    {
			ArrayList list = new110();
			push(goTo(40), list);
		    }
		    break;
                    case 111: /* reduce AMeRealExpression */
		    {
			ArrayList list = new111();
			push(goTo(40), list);
		    }
		    break;
                    case 112: /* reduce ANewRealExpression */
		    {
			ArrayList list = new112();
			push(goTo(40), list);
		    }
		    break;
                    case 113: /* reduce ATerminal$Eol */
		    {
			ArrayList list = new113();
			push(goTo(41), list);
		    }
		    break;
                    case 114: /* reduce ANonTerminal$Eol */
		    {
			ArrayList list = new114();
			push(goTo(41), list);
		    }
		    break;
                    case 115: /* reduce ATerminal$ClassDef */
		    {
			ArrayList list = new115();
			push(goTo(42), list);
		    }
		    break;
                    case 116: /* reduce ANonTerminal$ClassDef */
		    {
			ArrayList list = new116();
			push(goTo(42), list);
		    }
		    break;
                    case 117: /* reduce ATerminal$VarDeclaration */
		    {
			ArrayList list = new117();
			push(goTo(43), list);
		    }
		    break;
                    case 118: /* reduce ANonTerminal$VarDeclaration */
		    {
			ArrayList list = new118();
			push(goTo(43), list);
		    }
		    break;
                    case 119: /* reduce ATerminal$MethodDeclaration */
		    {
			ArrayList list = new119();
			push(goTo(44), list);
		    }
		    break;
                    case 120: /* reduce ANonTerminal$MethodDeclaration */
		    {
			ArrayList list = new120();
			push(goTo(44), list);
		    }
		    break;
                    case 121: /* reduce ATerminal$ArgumentDeclarationHead */
		    {
			ArrayList list = new121();
			push(goTo(45), list);
		    }
		    break;
                    case 122: /* reduce ANonTerminal$ArgumentDeclarationHead */
		    {
			ArrayList list = new122();
			push(goTo(45), list);
		    }
		    break;
                    case 123: /* reduce ATerminal$StatementHead */
		    {
			ArrayList list = new123();
			push(goTo(46), list);
		    }
		    break;
                    case 124: /* reduce ANonTerminal$StatementHead */
		    {
			ArrayList list = new124();
			push(goTo(46), list);
		    }
		    break;
                    case 125: /* reduce ATerminal$BracketOperation */
		    {
			ArrayList list = new125();
			push(goTo(47), list);
		    }
		    break;
                    case 126: /* reduce ANonTerminal$BracketOperation */
		    {
			ArrayList list = new126();
			push(goTo(47), list);
		    }
		    break;
                    case 127: /* reduce ATerminal$ExpressionHead */
		    {
			ArrayList list = new127();
			push(goTo(48), list);
		    }
		    break;
                    case 128: /* reduce ANonTerminal$ExpressionHead */
		    {
			ArrayList list = new128();
			push(goTo(48), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PStart pstartNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pstartNode1 = new AStart(listNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pstartNode1 = new AStart(listNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstartNode1 = new AStart(listNode3);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AClassInheritance */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList3.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAclassdef1ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        TId tidNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidNode6 = (TId)nodeArrayList6.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode4, listNode5, tidNode6);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAclassdef2ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        TId tidNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidNode6 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, tidNode3, listNode4, listNode5, tidNode6);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAclassdef3ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidNode7 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode5, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAclassdef4ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidNode7 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, tidNode3, listNode5, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAclassdef5ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidNode7 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode4, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAclassdef6ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidNode7 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, tidNode3, listNode4, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAclassdef7ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TId tidNode8;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAclassdef8ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TId tidNode8;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList9.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, tidNode3, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAclassdef9ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        TId tidNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidNode6 = (TId)nodeArrayList6.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode4, listNode5, tidNode6);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAclassdef10ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        TId tidNode6;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tidNode6 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, tidNode3, listNode4, listNode5, tidNode6);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAclassdef11ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidNode7 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode5, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAclassdef12ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        }
        tidNode7 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, tidNode3, listNode5, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AAclassdef13ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidNode7 = (TId)nodeArrayList7.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode4, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AAclassdef14ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        TId tidNode7;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tidNode7 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, tidNode3, listNode4, listNode6, tidNode7);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAclassdef15ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TId tidNode8;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList8.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, null, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAclassdef16ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClassDef pclassdefNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TId tidNode8;
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList9.get(0);

        pclassdefNode1 = new AClassDef(tidNode2, tidNode3, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pclassdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAvardeclaration1VarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDeclaration pvardeclarationNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvardeclarationNode1 = new AVarDeclaration(tidNode2, null, null);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAvardeclaration2VarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDeclaration pvardeclarationNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pvardeclarationNode1 = new AVarDeclaration(tidNode2, ptypeNode3, null);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAvardeclaration3VarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDeclaration pvardeclarationNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pvardeclarationNode1 = new AVarDeclaration(tidNode2, null, pexpressionNode4);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAvardeclaration4VarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDeclaration pvardeclarationNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pvardeclarationNode1 = new AVarDeclaration(tidNode2, ptypeNode3, pexpressionNode4);
        }
	nodeList.add(pvardeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AVarTypeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList2.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AVarInstantiation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAmethoddeclaration1MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TId tidNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList10.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode3, null, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AAmethoddeclaration2MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TId tidNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList11.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, null, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAmethoddeclaration3MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TId tidNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        PArgumentDeclaration pargumentdeclarationNode3;
        pargumentdeclarationNode3 = (PArgumentDeclaration)nodeArrayList3.get(0);
	if(pargumentdeclarationNode3 != null)
	{
	  listNode4.add(pargumentdeclarationNode3);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList11.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, null, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAmethoddeclaration4MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode5 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode6 = null;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TId tidNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PArgumentDeclaration pargumentdeclarationNode4;
        listNode3 = (LinkedList)nodeArrayList3.get(0);
        pargumentdeclarationNode4 = (PArgumentDeclaration)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode5.addAll(listNode3);
	}
	if(pargumentdeclarationNode4 != null)
	{
	  listNode5.add(pargumentdeclarationNode4);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidNode10 = (TId)nodeArrayList12.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode5, null, listNode7, listNode9, tidNode10);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAmethoddeclaration5MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        TId tidNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tidNode8 = (TId)nodeArrayList11.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode3, ptypeNode4, listNode5, listNode7, tidNode8);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAmethoddeclaration6MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TId tidNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList12.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, ptypeNode5, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AAmethoddeclaration7MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TId tidNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        PArgumentDeclaration pargumentdeclarationNode3;
        pargumentdeclarationNode3 = (PArgumentDeclaration)nodeArrayList3.get(0);
	if(pargumentdeclarationNode3 != null)
	{
	  listNode4.add(pargumentdeclarationNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList12.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, ptypeNode5, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAmethoddeclaration8MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode5 = new LinkedList();
        PType ptypeNode6;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TId tidNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PArgumentDeclaration pargumentdeclarationNode4;
        listNode3 = (LinkedList)nodeArrayList3.get(0);
        pargumentdeclarationNode4 = (PArgumentDeclaration)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode5.addAll(listNode3);
	}
	if(pargumentdeclarationNode4 != null)
	{
	  listNode5.add(pargumentdeclarationNode4);
	}
        }
        ptypeNode6 = (PType)nodeArrayList6.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidNode10 = (TId)nodeArrayList13.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode5, ptypeNode6, listNode7, listNode9, tidNode10);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AAmethoddeclaration9MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode4 = null;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TId tidNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList11.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode3, null, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAmethoddeclaration10MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TId tidNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidNode10 = (TId)nodeArrayList12.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, null, listNode7, listNode9, tidNode10);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAmethoddeclaration11MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TId tidNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        PArgumentDeclaration pargumentdeclarationNode3;
        pargumentdeclarationNode3 = (PArgumentDeclaration)nodeArrayList3.get(0);
	if(pargumentdeclarationNode3 != null)
	{
	  listNode4.add(pargumentdeclarationNode3);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidNode10 = (TId)nodeArrayList12.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, null, listNode7, listNode9, tidNode10);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAmethoddeclaration12MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode5 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode6 = null;
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        TId tidNode11;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PArgumentDeclaration pargumentdeclarationNode4;
        listNode3 = (LinkedList)nodeArrayList3.get(0);
        pargumentdeclarationNode4 = (PArgumentDeclaration)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode5.addAll(listNode3);
	}
	if(pargumentdeclarationNode4 != null)
	{
	  listNode5.add(pargumentdeclarationNode4);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList11.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tidNode11 = (TId)nodeArrayList13.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode5, null, listNode8, listNode10, tidNode11);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAmethoddeclaration13MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        TId tidNode9;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList10.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tidNode9 = (TId)nodeArrayList12.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode3, ptypeNode4, listNode6, listNode8, tidNode9);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAmethoddeclaration14MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TId tidNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidNode10 = (TId)nodeArrayList13.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, ptypeNode5, listNode7, listNode9, tidNode10);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAmethoddeclaration15MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        TId tidNode10;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        PArgumentDeclaration pargumentdeclarationNode3;
        pargumentdeclarationNode3 = (PArgumentDeclaration)nodeArrayList3.get(0);
	if(pargumentdeclarationNode3 != null)
	{
	  listNode4.add(pargumentdeclarationNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tidNode10 = (TId)nodeArrayList13.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode4, ptypeNode5, listNode7, listNode9, tidNode10);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAmethoddeclaration16MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethodDeclaration pmethoddeclarationNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode5 = new LinkedList();
        PType ptypeNode6;
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        TId tidNode11;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PArgumentDeclaration pargumentdeclarationNode4;
        listNode3 = (LinkedList)nodeArrayList3.get(0);
        pargumentdeclarationNode4 = (PArgumentDeclaration)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode5.addAll(listNode3);
	}
	if(pargumentdeclarationNode4 != null)
	{
	  listNode5.add(pargumentdeclarationNode4);
	}
        }
        ptypeNode6 = (PType)nodeArrayList6.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList12.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tidNode11 = (TId)nodeArrayList14.get(0);

        pmethoddeclarationNode1 = new AMethodDeclaration(tidNode2, listNode5, ptypeNode6, listNode8, listNode10, tidNode11);
        }
	nodeList.add(pmethoddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AArgumentDeclarationHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentDeclaration pargumentdeclarationNode1;
        pargumentdeclarationNode1 = (PArgumentDeclaration)nodeArrayList1.get(0);
	nodeList.add(pargumentdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AArgumentDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArgumentDeclaration pargumentdeclarationNode1;
        {
            // Block
        TId tidNode2;
        PType ptypeNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        pargumentdeclarationNode1 = new AArgumentDeclaration(tidNode2, ptypeNode3);
        }
	nodeList.add(pargumentdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AIntVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntegerType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AStringVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        ptypeNode1 = new AStringType(tstringNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ABooleanVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AIdVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AOtherType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AArrayVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList1.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ATest2ArrayVarType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PType ptypeNode2;
        PExpression pexpressionNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        ptypeNode1 = new AArrayType(ptypeNode2, pexpressionNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAstatementlist1StatementList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AAstatementlist2StatementList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AStatementHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ALoopStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce ACallCaseStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAtest3assignmentstatement1AssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AAssignmentStatement(tidNode2, listNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AAtest3assignmentstatement2AssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PExpression pexpressionNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(tidNode2, listNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AElseHelper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PElseHelper pelsehelperNode1;
        {
            // Block

        pelsehelperNode1 = new AElseHelper();
        }
	nodeList.add(pelsehelperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAtest4ifstatement1IfStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        LinkedList listNode5 = new LinkedList();
        PElseHelper pelsehelperNode6;
        LinkedList listNode7 = new LinkedList();
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pelsehelperNode6 = (PElseHelper)nodeArrayList6.get(0);
        {
            // Block
        }

        pstatementNode1 = new AIfStatement(tifNode2, pexpressionNode3, listNode5, pelsehelperNode6, listNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAtest4ifstatement2IfStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        LinkedList listNode5 = new LinkedList();
        PElseHelper pelsehelperNode6;
        LinkedList listNode8 = new LinkedList();
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pelsehelperNode6 = (PElseHelper)nodeArrayList6.get(0);
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList7.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pstatementNode1 = new AIfStatement(tifNode2, pexpressionNode3, listNode5, pelsehelperNode6, listNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AIfStatementElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ATest5LoopStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TLoop tloopNode2;
        PExpression pexpressionNode3;
        LinkedList listNode5 = new LinkedList();
        tloopNode2 = (TLoop)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pstatementNode1 = new ALoopStatement(tloopNode2, pexpressionNode3, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ACallStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pstatementNode1 = new ACallStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AAexpressionsexpressionlist1ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AAexpressionsexpressionlist2ExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AEmptyExpressionListExpressionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AExpressionHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ANegateUnaryOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMinusOp tminusopNode2;
        tminusopNode2 = (TMinusOp)nodeArrayList1.get(0);

        poperatorNode1 = new AMinusOperator(tminusopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce APositiveUnaryOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TPlusOp tplusopNode2;
        tplusopNode2 = (TPlusOp)nodeArrayList1.get(0);

        poperatorNode1 = new APlusOperator(tplusopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ANotUnaryOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TNot tnotNode2;
        tnotNode2 = (TNot)nodeArrayList1.get(0);

        poperatorNode1 = new ANotOperator(tnotNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AMultiplyMultOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMultOp tmultopNode2;
        tmultopNode2 = (TMultOp)nodeArrayList1.get(0);

        poperatorNode1 = new AMultOperator(tmultopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ADivideMultOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TDivOp tdivopNode2;
        tdivopNode2 = (TDivOp)nodeArrayList1.get(0);

        poperatorNode1 = new ADivOperator(tdivopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AAddAddOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TPlusOp tplusopNode2;
        tplusopNode2 = (TPlusOp)nodeArrayList1.get(0);

        poperatorNode1 = new APlusOperator(tplusopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ASubtractAddOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMinusOp tminusopNode2;
        tminusopNode2 = (TMinusOp)nodeArrayList1.get(0);

        poperatorNode1 = new AMinusOperator(tminusopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AEqualRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TEqOp teqopNode2;
        teqopNode2 = (TEqOp)nodeArrayList1.get(0);

        poperatorNode1 = new AEqualOperator(teqopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AGreaterRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TGtOp tgtopNode2;
        tgtopNode2 = (TGtOp)nodeArrayList1.get(0);

        poperatorNode1 = new AGreaterOperator(tgtopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AGreaterEqualRelationalOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TGteOp tgteopNode2;
        tgteopNode2 = (TGteOp)nodeArrayList1.get(0);

        poperatorNode1 = new AGreaterEqualOperator(tgteopNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ABracketOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AGetAtReference */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AArrayExpression(tidNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AObjectCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AAcallexpression1CallExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new ACallExpression(null, tidNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AAcallexpression2CallExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new ACallExpression(pexpressionNode2, tidNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AOrOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TOr torNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        torNode2 = (TOr)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AOrExpression(torNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AExpr1OrExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AAndAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TAnd tandNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tandNode2 = (TAnd)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(tandNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AExpr2AndExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ARelationalRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        POperator poperatorNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        poperatorNode2 = (POperator)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AComparisonExpression(poperatorNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce AExpr3RelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce AConcatConcatExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TConcatOp tconcatopNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tconcatopNode2 = (TConcatOp)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AConcatenationExpression(tconcatopNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce AExpr4ConcatExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AAddAddExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        POperator poperatorNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        poperatorNode2 = (POperator)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAddExpression(poperatorNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce AExpr5AddExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce AMultMultExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        POperator poperatorNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        poperatorNode2 = (POperator)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultExpression(poperatorNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce AExpr6MultExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce AUnaryUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        POperator poperatorNode2;
        PExpression pexpressionNode3;
        poperatorNode2 = (POperator)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AUnaryExpression(poperatorNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce AExpr7UnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce AGetAtObjectCallExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ACallExprObjectCallExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce AExpr9ObjectCallExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce AGroupGroupExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce AExpr11GroupExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce AIdentifierRealExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdentifierExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce AStringRealExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TStrlit tstrlitNode2;
        tstrlitNode2 = (TStrlit)nodeArrayList1.get(0);

        pexpressionNode1 = new AStringExpression(tstrlitNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce AIntRealExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TIntlit tintlitNode2;
        tintlitNode2 = (TIntlit)nodeArrayList1.get(0);

        pexpressionNode1 = new AIntegerExpression(tintlitNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce ATrueRealExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new ATrueExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce AFalseRealExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new AFalseExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce ANullRealExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new ANullExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce AMeRealExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block

        pexpressionNode1 = new AMeExpression();
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce ANewRealExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList2.get(0);

        pexpressionNode1 = new ANewObjectExpression(ptypeNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce ATerminal$Eol */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TEol teolNode1;
        teolNode1 = (TEol)nodeArrayList1.get(0);
	if(teolNode1 != null)
	{
	  listNode2.add(teolNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce ANonTerminal$Eol */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TEol teolNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        teolNode2 = (TEol)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(teolNode2 != null)
	{
	  listNode3.add(teolNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new115() /* reduce ATerminal$ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClassDef pclassdefNode1;
        pclassdefNode1 = (PClassDef)nodeArrayList1.get(0);
	if(pclassdefNode1 != null)
	{
	  listNode2.add(pclassdefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new116() /* reduce ANonTerminal$ClassDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PClassDef pclassdefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdefNode2 = (PClassDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdefNode2 != null)
	{
	  listNode3.add(pclassdefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new117() /* reduce ATerminal$VarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVarDeclaration pvardeclarationNode1;
        pvardeclarationNode1 = (PVarDeclaration)nodeArrayList1.get(0);
	if(pvardeclarationNode1 != null)
	{
	  listNode2.add(pvardeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new118() /* reduce ANonTerminal$VarDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVarDeclaration pvardeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclarationNode2 = (PVarDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclarationNode2 != null)
	{
	  listNode3.add(pvardeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new119() /* reduce ATerminal$MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMethodDeclaration pmethoddeclarationNode1;
        pmethoddeclarationNode1 = (PMethodDeclaration)nodeArrayList1.get(0);
	if(pmethoddeclarationNode1 != null)
	{
	  listNode2.add(pmethoddeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new120() /* reduce ANonTerminal$MethodDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMethodDeclaration pmethoddeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclarationNode2 = (PMethodDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclarationNode2 != null)
	{
	  listNode3.add(pmethoddeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new121() /* reduce ATerminal$ArgumentDeclarationHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PArgumentDeclaration pargumentdeclarationNode1;
        pargumentdeclarationNode1 = (PArgumentDeclaration)nodeArrayList1.get(0);
	if(pargumentdeclarationNode1 != null)
	{
	  listNode2.add(pargumentdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new122() /* reduce ANonTerminal$ArgumentDeclarationHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PArgumentDeclaration pargumentdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pargumentdeclarationNode2 = (PArgumentDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pargumentdeclarationNode2 != null)
	{
	  listNode3.add(pargumentdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new123() /* reduce ATerminal$StatementHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new124() /* reduce ANonTerminal$StatementHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new125() /* reduce ATerminal$BracketOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new126() /* reduce ANonTerminal$BracketOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new127() /* reduce ATerminal$ExpressionHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new128() /* reduce ANonTerminal$ExpressionHead */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {4, SHIFT, 1}, {45, SHIFT, 2}, },
			{{-1, ERROR, 1}, {40, SHIFT, 7}, },
			{{-1, REDUCE, 113}, },
			{{-1, ERROR, 3}, {47, ACCEPT, -1}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 1}, {4, SHIFT, 1}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 2}, {4, SHIFT, 1}, },
			{{-1, ERROR, 7}, {9, SHIFT, 11}, {11, SHIFT, 12}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 3}, {4, SHIFT, 1}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 11}, {8, SHIFT, 14}, },
			{{-1, ERROR, 12}, {45, SHIFT, 2}, },
			{{-1, ERROR, 13}, {11, SHIFT, 16}, },
			{{-1, ERROR, 14}, {40, SHIFT, 17}, },
			{{-1, ERROR, 15}, {6, SHIFT, 18}, {40, SHIFT, 19}, {45, SHIFT, 8}, },
			{{-1, ERROR, 16}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 18}, {40, SHIFT, 25}, },
			{{-1, ERROR, 19}, {25, SHIFT, 26}, {35, SHIFT, 27}, {37, SHIFT, 28}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 22}, {6, SHIFT, 32}, {40, SHIFT, 19}, },
			{{-1, ERROR, 23}, {6, SHIFT, 35}, {40, SHIFT, 36}, },
			{{-1, ERROR, 24}, {6, SHIFT, 38}, {40, SHIFT, 19}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 5}, {45, SHIFT, 2}, },
			{{-1, ERROR, 26}, {2, SHIFT, 42}, {10, SHIFT, 43}, {17, SHIFT, 44}, {40, SHIFT, 45}, },
			{{-1, ERROR, 27}, {36, SHIFT, 48}, {40, SHIFT, 49}, },
			{{-1, ERROR, 28}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, ERROR, 29}, {37, SHIFT, 28}, {45, SHIFT, 2}, },
			{{-1, ERROR, 30}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 21}, {45, SHIFT, 8}, },
			{{-1, ERROR, 32}, {40, SHIFT, 83}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 34}, {6, SHIFT, 84}, {40, SHIFT, 36}, },
			{{-1, ERROR, 35}, {40, SHIFT, 85}, },
			{{-1, ERROR, 36}, {35, SHIFT, 27}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 38}, {40, SHIFT, 86}, },
			{{-1, ERROR, 39}, {6, SHIFT, 87}, {40, SHIFT, 19}, },
			{{-1, ERROR, 40}, {6, SHIFT, 89}, {40, SHIFT, 36}, },
			{{-1, REDUCE, 13}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 25}, {38, SHIFT, 90}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 48}, {11, SHIFT, 91}, {25, SHIFT, 26}, },
			{{-1, ERROR, 49}, {25, SHIFT, 26}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 51}, {24, SHIFT, 94}, {36, SHIFT, 95}, },
			{{-1, ERROR, 52}, {36, SHIFT, 96}, {40, SHIFT, 49}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 55}, {2, SHIFT, 42}, {10, SHIFT, 43}, {17, SHIFT, 44}, {40, SHIFT, 45}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 61}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 105}, {35, SHIFT, 101}, {38, SHIFT, 102}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 65}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 100}, },
			{{-1, ERROR, 67}, {40, SHIFT, 105}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 85}, {21, SHIFT, 106}, },
			{{-1, REDUCE, 87}, {20, SHIFT, 107}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 91}, {27, SHIFT, 108}, {28, SHIFT, 109}, {29, SHIFT, 110}, {34, SHIFT, 111}, },
			{{-1, REDUCE, 93}, {30, SHIFT, 113}, {31, SHIFT, 114}, },
			{{-1, REDUCE, 95}, {32, SHIFT, 116}, {33, SHIFT, 117}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 99}, {26, SHIFT, 119}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 80}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 22}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 23}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 7}, {45, SHIFT, 2}, },
			{{-1, ERROR, 84}, {40, SHIFT, 122}, },
			{{-1, REDUCE, 9}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 6}, {45, SHIFT, 2}, },
			{{-1, ERROR, 87}, {40, SHIFT, 125}, },
			{{-1, ERROR, 88}, {6, SHIFT, 126}, {40, SHIFT, 36}, },
			{{-1, ERROR, 89}, {40, SHIFT, 127}, },
			{{-1, ERROR, 90}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, ERROR, 91}, {45, SHIFT, 2}, },
			{{-1, ERROR, 92}, {11, SHIFT, 130}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 95}, {11, SHIFT, 131}, {25, SHIFT, 26}, },
			{{-1, ERROR, 96}, {11, SHIFT, 133}, {25, SHIFT, 26}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 98}, {24, SHIFT, 94}, {36, SHIFT, 135}, },
			{{-1, REDUCE, 112}, {38, SHIFT, 90}, },
			{{-1, ERROR, 100}, {36, SHIFT, 136}, },
			{{-1, REDUCE, 68}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, ERROR, 102}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 105}, {35, SHIFT, 142}, },
			{{-1, ERROR, 106}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, ERROR, 107}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 111}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, ERROR, 112}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 115}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 118}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 24}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 15}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 11}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 17}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 14}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 8}, {45, SHIFT, 2}, },
			{{-1, ERROR, 126}, {40, SHIFT, 151}, },
			{{-1, REDUCE, 10}, {45, SHIFT, 2}, },
			{{-1, ERROR, 128}, {39, SHIFT, 153}, },
			{{-1, ERROR, 129}, {3, SHIFT, 154}, {40, SHIFT, 155}, {45, SHIFT, 8}, },
			{{-1, ERROR, 130}, {45, SHIFT, 2}, },
			{{-1, ERROR, 131}, {45, SHIFT, 2}, },
			{{-1, ERROR, 132}, {11, SHIFT, 159}, },
			{{-1, ERROR, 133}, {45, SHIFT, 2}, },
			{{-1, ERROR, 134}, {11, SHIFT, 161}, },
			{{-1, ERROR, 135}, {11, SHIFT, 162}, {25, SHIFT, 26}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 137}, {36, SHIFT, 164}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 66}, {23, SHIFT, 165}, },
			{{-1, ERROR, 140}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, ERROR, 141}, {39, SHIFT, 168}, },
			{{-1, REDUCE, 68}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 86}, {20, SHIFT, 107}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 92}, {30, SHIFT, 113}, {31, SHIFT, 114}, },
			{{-1, REDUCE, 90}, {34, SHIFT, 111}, },
			{{-1, REDUCE, 94}, {32, SHIFT, 116}, {33, SHIFT, 117}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 19}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 16}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 12}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 18}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 154}, {45, SHIFT, 2}, },
			{{-1, ERROR, 155}, {25, SHIFT, 26}, {37, SHIFT, 28}, {45, SHIFT, 2}, },
			{{-1, ERROR, 156}, {3, SHIFT, 172}, {40, SHIFT, 155}, },
			{{-1, ERROR, 157}, {3, SHIFT, 173}, {40, SHIFT, 155}, {45, SHIFT, 8}, },
			{{-1, ERROR, 158}, {3, SHIFT, 175}, {40, SHIFT, 155}, {45, SHIFT, 8}, },
			{{-1, ERROR, 159}, {45, SHIFT, 2}, },
			{{-1, ERROR, 160}, {3, SHIFT, 178}, {40, SHIFT, 155}, {45, SHIFT, 8}, },
			{{-1, ERROR, 161}, {45, SHIFT, 2}, },
			{{-1, ERROR, 162}, {45, SHIFT, 2}, },
			{{-1, ERROR, 163}, {11, SHIFT, 182}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 67}, {23, SHIFT, 165}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 169}, {36, SHIFT, 183}, },
			{{-1, REDUCE, 20}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 172}, {45, SHIFT, 2}, },
			{{-1, ERROR, 173}, {45, SHIFT, 2}, },
			{{-1, ERROR, 174}, {3, SHIFT, 199}, {40, SHIFT, 155}, },
			{{-1, ERROR, 175}, {45, SHIFT, 2}, },
			{{-1, ERROR, 176}, {3, SHIFT, 201}, {40, SHIFT, 155}, },
			{{-1, ERROR, 177}, {3, SHIFT, 202}, {40, SHIFT, 155}, {45, SHIFT, 8}, },
			{{-1, ERROR, 178}, {45, SHIFT, 2}, },
			{{-1, ERROR, 179}, {3, SHIFT, 205}, {40, SHIFT, 155}, },
			{{-1, ERROR, 180}, {3, SHIFT, 206}, {40, SHIFT, 155}, {45, SHIFT, 8}, },
			{{-1, ERROR, 181}, {3, SHIFT, 208}, {40, SHIFT, 155}, {45, SHIFT, 8}, },
			{{-1, ERROR, 182}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 184}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, ERROR, 185}, {1, SHIFT, 212}, },
			{{-1, REDUCE, 105}, {35, SHIFT, 101}, {37, SHIFT, 28}, {38, SHIFT, 102}, },
			{{-1, ERROR, 187}, {6, SHIFT, 216}, },
			{{-1, REDUCE, 123}, },
			{{-1, ERROR, 189}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 101}, {45, REDUCE, 65}, },
			{{-1, ERROR, 195}, {26, SHIFT, 119}, },
			{{-1, REDUCE, 52}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 199}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 201}, {45, SHIFT, 2}, },
			{{-1, ERROR, 202}, {45, SHIFT, 2}, },
			{{-1, ERROR, 203}, {3, SHIFT, 225}, {40, SHIFT, 155}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 205}, {45, SHIFT, 2}, },
			{{-1, ERROR, 206}, {45, SHIFT, 2}, },
			{{-1, ERROR, 207}, {3, SHIFT, 229}, {40, SHIFT, 155}, },
			{{-1, ERROR, 208}, {45, SHIFT, 2}, },
			{{-1, ERROR, 209}, {3, SHIFT, 231}, {40, SHIFT, 155}, },
			{{-1, ERROR, 210}, {3, SHIFT, 232}, {40, SHIFT, 155}, {45, SHIFT, 8}, },
			{{-1, ERROR, 211}, {18, SHIFT, 234}, },
			{{-1, ERROR, 212}, {7, SHIFT, 53}, {13, SHIFT, 54}, {14, SHIFT, 55}, {15, SHIFT, 56}, {16, SHIFT, 57}, {19, SHIFT, 58}, {30, SHIFT, 59}, {31, SHIFT, 60}, {35, SHIFT, 61}, {40, SHIFT, 62}, {41, SHIFT, 63}, {42, SHIFT, 64}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 125}, {26, REDUCE, 81}, },
			{{-1, ERROR, 215}, {37, SHIFT, 28}, {38, SHIFT, 102}, },
			{{-1, ERROR, 216}, {40, SHIFT, 238}, },
			{{-1, REDUCE, 53}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 219}, {6, SHIFT, 239}, },
			{{-1, ERROR, 220}, {6, SHIFT, 240}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 222}, {6, SHIFT, 242}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 225}, {45, SHIFT, 2}, },
			{{-1, ERROR, 226}, {6, SHIFT, 246}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 229}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 231}, {45, SHIFT, 2}, },
			{{-1, ERROR, 232}, {45, SHIFT, 2}, },
			{{-1, ERROR, 233}, {3, SHIFT, 253}, {40, SHIFT, 155}, },
			{{-1, ERROR, 234}, {45, SHIFT, 2}, },
			{{-1, ERROR, 235}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 126}, },
			{{-1, ERROR, 238}, {45, SHIFT, 2}, },
			{{-1, ERROR, 239}, {40, SHIFT, 257}, },
			{{-1, ERROR, 240}, {40, SHIFT, 258}, },
			{{-1, ERROR, 241}, {6, SHIFT, 259}, },
			{{-1, ERROR, 242}, {40, SHIFT, 260}, },
			{{-1, ERROR, 243}, {6, SHIFT, 261}, },
			{{-1, ERROR, 244}, {6, SHIFT, 262}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 246}, {40, SHIFT, 264}, },
			{{-1, ERROR, 247}, {6, SHIFT, 265}, },
			{{-1, ERROR, 248}, {6, SHIFT, 266}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 250}, {6, SHIFT, 268}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, ERROR, 253}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 27}, {45, SHIFT, 8}, },
			{{-1, ERROR, 257}, {45, SHIFT, 2}, },
			{{-1, ERROR, 258}, {45, SHIFT, 2}, },
			{{-1, ERROR, 259}, {40, SHIFT, 276}, },
			{{-1, ERROR, 260}, {45, SHIFT, 2}, },
			{{-1, ERROR, 261}, {40, SHIFT, 278}, },
			{{-1, ERROR, 262}, {40, SHIFT, 279}, },
			{{-1, ERROR, 263}, {6, SHIFT, 280}, },
			{{-1, ERROR, 264}, {45, SHIFT, 2}, },
			{{-1, ERROR, 265}, {40, SHIFT, 282}, },
			{{-1, ERROR, 266}, {40, SHIFT, 283}, },
			{{-1, ERROR, 267}, {6, SHIFT, 284}, },
			{{-1, ERROR, 268}, {40, SHIFT, 285}, },
			{{-1, ERROR, 269}, {6, SHIFT, 286}, },
			{{-1, ERROR, 270}, {6, SHIFT, 287}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 273}, {6, SHIFT, 290}, },
			{{-1, REDUCE, 35}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 31}, {45, SHIFT, 8}, },
			{{-1, ERROR, 276}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 29}, {45, SHIFT, 8}, },
			{{-1, ERROR, 278}, {45, SHIFT, 2}, },
			{{-1, ERROR, 279}, {45, SHIFT, 2}, },
			{{-1, ERROR, 280}, {40, SHIFT, 294}, },
			{{-1, REDUCE, 28}, {45, SHIFT, 8}, },
			{{-1, ERROR, 282}, {45, SHIFT, 2}, },
			{{-1, ERROR, 283}, {45, SHIFT, 2}, },
			{{-1, ERROR, 284}, {40, SHIFT, 297}, },
			{{-1, ERROR, 285}, {45, SHIFT, 2}, },
			{{-1, ERROR, 286}, {40, SHIFT, 299}, },
			{{-1, ERROR, 287}, {40, SHIFT, 300}, },
			{{-1, ERROR, 288}, {6, SHIFT, 301}, },
			{{-1, ERROR, 289}, {5, SHIFT, 302}, {6, SHIFT, 303}, },
			{{-1, ERROR, 290}, {12, SHIFT, 305}, },
			{{-1, REDUCE, 39}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 37}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 33}, {45, SHIFT, 8}, },
			{{-1, ERROR, 294}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 36}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 32}, {45, SHIFT, 8}, },
			{{-1, ERROR, 297}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 30}, {45, SHIFT, 8}, },
			{{-1, ERROR, 299}, {45, SHIFT, 2}, },
			{{-1, ERROR, 300}, {45, SHIFT, 2}, },
			{{-1, ERROR, 301}, {40, SHIFT, 310}, },
			{{-1, ERROR, 302}, {45, SHIFT, 2}, },
			{{-1, ERROR, 303}, {0, SHIFT, 312}, },
			{{-1, ERROR, 304}, {6, SHIFT, 313}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 41}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 40}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 38}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 34}, {45, SHIFT, 8}, },
			{{-1, ERROR, 310}, {45, SHIFT, 2}, },
			{{-1, REDUCE, 51}, {0, SHIFT, 184}, {7, SHIFT, 53}, {12, SHIFT, 185}, {13, SHIFT, 54}, {14, SHIFT, 55}, {16, SHIFT, 57}, {19, SHIFT, 58}, {35, SHIFT, 61}, {40, SHIFT, 186}, {41, SHIFT, 63}, {42, SHIFT, 64}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 313}, {0, SHIFT, 316}, },
			{{-1, REDUCE, 42}, {45, SHIFT, 8}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 62}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 13}, },
			{{-1, 4}, {6, 10}, {9, 10}, },
			{{-1, 20}, {22, 33}, {39, 33}, {156, 33}, {174, 33}, {176, 33}, {179, 33}, {203, 33}, {207, 33}, {209, 33}, {233, 33}, },
			{{-1, 29}, {48, 92}, {49, 93}, {95, 132}, {96, 134}, {135, 163}, },
			{{-1, 30}, {29, 80}, {186, 213}, {215, 236}, },
			{{-1, 21}, {23, 37}, {34, 37}, {40, 37}, {88, 37}, },
			{{-1, 50}, {52, 97}, },
			{{-1, 51}, {52, 98}, },
			{{-1, 46}, {55, 99}, },
			{{-1, 47}, },
			{{-1, 187}, {197, 219}, {198, 220}, {200, 222}, {204, 226}, {221, 241}, {223, 243}, {224, 244}, {227, 247}, {228, 248}, {230, 250}, {245, 263}, {249, 267}, {251, 269}, {252, 270}, {254, 272}, {255, 273}, {271, 288}, {311, 315}, },
			{{-1, 188}, {196, 218}, },
			{{-1, 189}, },
			{{-1, 190}, },
			{{-1, 289}, },
			{{-1, 191}, },
			{{-1, 304}, },
			{{-1, 192}, },
			{{-1, 193}, },
			{{-1, 137}, {142, 169}, },
			{{-1, 138}, {140, 166}, },
			{{-1, 65}, },
			{{-1, 118}, },
			{{-1, 115}, },
			{{-1, 112}, },
			{{-1, 103}, {186, 214}, {215, 237}, },
			{{-1, 66}, },
			{{-1, 67}, },
			{{-1, 194}, {28, 68}, {61, 68}, {65, 68}, {90, 68}, {101, 68}, {102, 68}, {106, 68}, {107, 68}, {111, 68}, {112, 68}, {115, 68}, {118, 68}, {140, 68}, {142, 68}, {184, 68}, {212, 68}, },
			{{-1, 139}, {28, 69}, {61, 100}, {90, 128}, {102, 141}, {140, 167}, {184, 211}, {212, 235}, },
			{{-1, 70}, },
			{{-1, 71}, {106, 143}, },
			{{-1, 72}, {107, 144}, },
			{{-1, 73}, {112, 146}, },
			{{-1, 74}, {111, 145}, },
			{{-1, 75}, {115, 147}, },
			{{-1, 76}, {65, 104}, {118, 148}, },
			{{-1, 195}, {28, 77}, {61, 77}, {65, 77}, {90, 77}, {101, 77}, {102, 77}, {106, 77}, {107, 77}, {111, 77}, {112, 77}, {115, 77}, {118, 77}, {140, 77}, {142, 77}, {184, 77}, {212, 77}, },
			{{-1, 78}, },
			{{-1, 79}, },
			{{-1, 31}, {0, 5}, {12, 15}, {16, 24}, {25, 41}, {29, 81}, {30, 82}, {80, 120}, {83, 121}, {85, 123}, {86, 124}, {91, 129}, {122, 149}, {125, 150}, {127, 152}, {130, 157}, {131, 158}, {133, 160}, {151, 170}, {154, 171}, {159, 177}, {161, 180}, {162, 181}, {172, 197}, {173, 198}, {175, 200}, {178, 204}, {182, 210}, {189, 217}, {199, 221}, {201, 223}, {202, 224}, {205, 227}, {206, 228}, {208, 230}, {225, 245}, {229, 249}, {231, 251}, {232, 252}, {234, 254}, {235, 255}, {238, 256}, {253, 271}, {257, 274}, {258, 275}, {260, 277}, {264, 281}, {276, 291}, {278, 292}, {279, 293}, {282, 295}, {283, 296}, {285, 298}, {294, 306}, {297, 307}, {299, 308}, {300, 309}, {302, 311}, {310, 314}, },
			{{-1, 6}, {5, 9}, },
			{{-1, 22}, {24, 39}, {129, 156}, {157, 174}, {158, 176}, {160, 179}, {177, 203}, {180, 207}, {181, 209}, {210, 233}, },
			{{-1, 23}, {22, 34}, {24, 40}, {39, 88}, },
			{{-1, 52}, },
			{{-1, 196}, },
			{{-1, 215}, },
			{{-1, 140}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class', eol, EOF",
			"expecting: id",
			"expecting: 'if', 'begin', 'class', 'else', 'end', 'false', 'loop', 'me', 'new', 'null', 'true', '(', id, intlit, strlit, eol, EOF",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: 'inherits', 'is'",
			"expecting: 'from'",
			"expecting: eol",
			"expecting: 'is'",
			"expecting: 'end', id, eol",
			"expecting: ':', '(', ':=', eol",
			"expecting: 'begin', 'end', id",
			"expecting: 'end', id",
			"expecting: 'boolean', 'int', 'string', id",
			"expecting: ')', id",
			"expecting: 'false', 'me', 'new', 'not', 'null', 'true', '+', '-', '(', id, intlit, strlit",
			"expecting: ':=', eol",
			"expecting: 'begin', 'end', id, eol",
			"expecting: '('",
			"expecting: 'is', 'then', 'and', 'or', ',', ';', '.', '>=', '>', '=', '+', '-', '*', '/', '&', ')', ':=', '[', ']', eol",
			"expecting: 'is', ';', ')', ':=', '[', eol",
			"expecting: 'is', ':'",
			"expecting: ':'",
			"expecting: ';', ')'",
			"expecting: 'then', 'and', 'or', ',', '.', '>=', '>', '=', '+', '-', '*', '/', '&', ')', ']', eol",
			"expecting: 'then', 'and', 'or', ',', '.', '>=', '>', '=', '+', '-', '*', '/', '&', '(', ')', '[', ']', eol",
			"expecting: 'then', 'or', ',', ')', ']', eol",
			"expecting: 'then', 'and', 'or', ',', ')', ']', eol",
			"expecting: 'then', 'and', 'or', ',', '>=', '>', '=', '&', ')', ']', eol",
			"expecting: 'then', 'and', 'or', ',', '>=', '>', '=', '+', '-', '&', ')', ']', eol",
			"expecting: 'then', 'and', 'or', ',', '>=', '>', '=', '+', '-', '*', '/', '&', ')', ']', eol",
			"expecting: 'then', 'and', 'or', ',', '.', '>=', '>', '=', '+', '-', '*', '/', '&', ')', '[', ']', eol",
			"expecting: ')'",
			"expecting: 'false', 'me', 'new', 'not', 'null', 'true', '+', '-', '(', ')', id, intlit, strlit",
			"expecting: ']'",
			"expecting: 'begin', id, eol",
			"expecting: ',', ')'",
			"expecting: 'then', 'and', 'or', ',', '&', ')', ']', eol",
			"expecting: ':', ':=', eol",
			"expecting: 'begin', id",
			"expecting: 'then', 'and', 'or', ',', '.', '>=', '>', '=', '+', '-', '*', '/', '&', ')', ':=', '[', ']', eol",
			"expecting: 'if', 'end', 'false', 'loop', 'me', 'new', 'null', 'true', '(', id, intlit, strlit, eol",
			"expecting: 'while'",
			"expecting: '.', '(', ':=', '['",
			"expecting: 'end'",
			"expecting: 'if', 'else', 'end', 'false', 'loop', 'me', 'new', 'null', 'true', '(', id, intlit, strlit",
			"expecting: '.', eol",
			"expecting: '.'",
			"expecting: 'then'",
			"expecting: '.', ':=', '['",
			"expecting: ':=', '['",
			"expecting: 'if', 'else', 'end', 'false', 'loop', 'me', 'new', 'null', 'true', '(', id, intlit, strlit, eol",
			"expecting: 'else', 'end'",
			"expecting: 'loop'",
			"expecting: 'if'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 0, 4, 5, 2, 4, 4, 6, 7, 8, 1, 9, 7, 8, 1, 10, 11, 12, 12, 12, 9, 0, 13, 14, 15, 16, 7, 17, 1, 11, 12, 1, 18, 12, 1, 12, 12, 0, 19, 19, 19, 19, 20, 19, 21, 22, 14, 23, 14, 24, 24, 13, 15, 24, 24, 15, 15, 15, 25, 24, 24, 15, 24, 1, 24, 7, 26, 27, 27, 28, 29, 30, 30, 24, 24, 24, 7, 17, 17, 0, 1, 0, 0, 1, 12, 1, 15, 7, 8, 23, 14, 21, 21, 14, 23, 31, 32, 33, 15, 24, 30, 18, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 17, 0, 0, 0, 0, 0, 1, 0, 34, 35, 7, 7, 8, 7, 8, 21, 24, 32, 15, 36, 15, 34, 33, 27, 27, 29, 37, 30, 30, 0, 0, 0, 0, 19, 7, 38, 39, 35, 35, 7, 35, 7, 7, 8, 24, 15, 15, 36, 40, 32, 0, 41, 7, 7, 39, 7, 39, 35, 7, 39, 35, 35, 7, 24, 15, 42, 43, 44, 45, 7, 7, 7, 7, 7, 46, 47, 45, 41, 41, 7, 41, 7, 7, 39, 41, 7, 7, 39, 7, 39, 35, 48, 15, 7, 49, 50, 1, 51, 45, 44, 44, 41, 44, 41, 41, 7, 44, 41, 41, 7, 41, 7, 7, 39, 7, 7, 7, 50, 7, 1, 1, 44, 1, 44, 44, 41, 1, 44, 44, 41, 44, 41, 41, 7, 51, 41, 9, 7, 7, 1, 7, 1, 1, 44, 7, 1, 1, 44, 1, 44, 44, 41, 52, 44, 9, 9, 7, 9, 7, 7, 1, 9, 7, 7, 1, 7, 1, 1, 44, 52, 53, 9, 9, 9, 7, 9, 9, 7, 9, 7, 7, 1, 7, 54, 44, 7, 9, 9, 9, 9, 7, 41, 7, 54, 9, 44, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
