// oodle.scc
// Specifies the scanning rules for SableCC
// James Coleman, 2010

Package cps450.oodle;

Helpers
  letter = ['A'..'Z'] | ['a'..'z'];
  word_char = letter | '_';
  digit = ['0'..'9'];
  cr = 13;
  lf = 10;
  not_cr_lf = [[0..127] - [cr + lf]];
  newline = lf | cr lf;
  octal_digit = ['0'..'7'];
  non_string_char = ['"' + '\'];
  string_char = [not_cr_lf - non_string_char];
  escaped_sequence = '\t' | '\n' | '\f' | '\r' | '\"' | '\\' | '\' octal_digit octal_digit octal_digit;
  string_contents = (string_char* escaped_sequence*)*;
  
Tokens
  if = 'if';
  while = 'while';
  boolean = 'boolean';
  begin = 'begin';
  klass = 'class';
  else = 'else';
  end = 'end';
  false = 'false';
  from = 'from';
  inherits = 'inherits';
  int = 'int';
  is = 'is';
  loop = 'loop';
  me = 'me';
  new = 'new';
  not = 'not';
  null = 'null';
  string = 'string';
  then = 'then';
  true = 'true';
  and = 'and';
  or = 'or';
  
  bang = '!';

  comma = ',';
  semicolon = ';';
  colon = ':';
  period = '.';

  gte_op = '>=';
  gt_op = '>';
  eq_op = '=';

  plus_op = '+';
  minus_op = '-';
  mult_op = '*';
  div_op = '/';
  
  concat_op = '&';

  l_par = '(';
  r_par = ')';
  
  assignment_op = ':=';
  l_bracket = '[';
  r_bracket = ']';

  id = word_char (word_char | digit)*;
  
  intlit = digit+ | '-' digit+;
  
  strlit = '"' string_contents '"';
  illegal_string = '"' (string_char | '\')* '"';
  unterminated_string = '"' string_contents;

  continuation = '_' newline;
  eol = newline;

  blank = (' ' | 9)+;
  comment = '~' not_cr_lf*;
  
  illegal_char = [0..127];
	
Ignored Tokens
  
  blank, continuation, comment;
  

Productions
  
  start {-> start } = T.eol* class_def* {-> New start([class_def]) };
  
  class_inheritance {-> T.id } = T.inherits T.from id {-> id };
  class_def {-> class_def } = T.klass [begin]:T.id class_inheritance? T.is [eol1]:T.eol+
                              var_declaration*
                              method_declaration*
                              T.end [class_end]:T.id [eol2]:T.eol*
                              {-> New class_def(begin, class_inheritance.id, [var_declaration], [method_declaration], class_end) };
  
  var_declaration {-> var_declaration } = T.id var_type_declaration? var_instantiation? T.eol+
                                          {-> New var_declaration(id, var_type_declaration.type, var_instantiation.expression) };
  var_type_declaration {-> type } = T.colon var_type {-> var_type.type };
  var_instantiation {-> expression } = T.assignment_op expression {-> expression };
  
  method_declaration {-> method_declaration } = [method_dec_begin]:id T.l_par argument_declaration_head* argument_declaration? T.r_par var_type_declaration? T.is [method_begin]:T.eol+
                                                var_declaration*
                                                T.begin [method_middle]:T.eol+
                                                statement_list
                                                T.end [method_dec_end]:T.id [method_end]:T.eol+
                                                {-> New method_declaration(method_dec_begin, [argument_declaration_head.argument_declaration, argument_declaration], var_type_declaration.type, [var_declaration.var_declaration], [statement_list.statement], method_dec_end) };
  
  argument_declaration_head {-> argument_declaration } = argument_declaration T.semicolon {-> argument_declaration.argument_declaration };
  argument_declaration {-> argument_declaration } = T.id var_type_declaration {-> New argument_declaration(id, var_type_declaration.type) };
  
  var_type {-> type } = {int} T.int {-> New type.integer(int) }
                      | {string} T.string {-> New type.string(string) }
                      | {boolean} T.boolean {-> New type.boolean(boolean) }
                      | {id} T.id {-> New type.other(id) }
                      | {array} array_var_type {-> array_var_type.type };
                      
  array_var_type {-> type } = {test2} var_type T.l_bracket expression T.r_bracket {-> New type.array(var_type.type, expression) };
  
  statement_list {-> statement* } = statement_head* {-> [statement_head.statement] };
  statement_head {-> statement } = statement T.eol+ {-> statement };
  statement {-> statement } = {assignment} assignment_statement {-> assignment_statement.statement }
                            | {if} if_statement {-> if_statement.statement }
                            | {loop} loop_statement {-> loop_statement.statement }
                            | {call_case} call_statement {-> call_statement.statement };
  
  assignment_statement {-> statement } = {test3} T.id bracket_operation* var_instantiation {-> New statement.assignment(id, [bracket_operation.expression], var_instantiation.expression) };
  
  else_helper {-> else_helper } = {-> New else_helper() };
  if_statement {-> statement } = {test4} [begin_if]:T.if expression T.then T.eol+
                                 statement_list
                                 else_helper
                                 if_statement_else?
                                 T.end [if_end]:T.if
                                 {-> New statement.if(begin_if, expression, [statement_list.statement], else_helper.else_helper, [if_statement_else.statement]) };
  if_statement_else {-> statement* } = T.else T.eol+
                                      statement_list {-> [statement_list.statement] };
  
  loop_statement {-> statement } = {test5} [loop_begin]:T.loop T.while expression T.eol+
                                   statement_list
                                   T.end [loop_end]:T.loop
                                   {-> New statement.loop(loop_begin, expression, [statement_list.statement]) };
  
  call_statement {-> statement } = call_expression {-> New statement.call(call_expression.expression) };
  
  expression_list {-> expression* } = {expressions} expression_head* expression {-> [expression_head.expression, expression] }
                                   | {empty_expression_list} {-> [] };
  expression_head {-> expression } = expression T.comma {-> expression };
  
  unary_operator {-> operator} = {negate} T.minus_op {-> New operator.minus(minus_op) }
                               | {positive} T.plus_op {-> New operator.plus(plus_op) }
                               | {not} T.not {-> New operator.not(not) };
  mult_operator {-> operator } = {multiply} T.mult_op {-> New operator.mult(mult_op) }
                | {divide} T.div_op {-> New operator.div(div_op) };
  add_operator {-> operator } = {add} T.plus_op {-> New operator.plus(plus_op) }
                              | {subtract} T.minus_op {-> New operator.minus(minus_op) };
  relational_operator {-> operator } = {equal} T.eq_op {-> New operator.equal(eq_op) }
                                     | {greater} T.gt_op {-> New operator.greater(gt_op) }
                                     | {greater_equal} T.gte_op{-> New operator.greater_equal(gte_op) };
  bracket_operation {-> expression } = T.l_bracket expression T.r_bracket {-> expression };
  get_at_reference {-> expression } = T.id bracket_operation {-> New expression.array(id, bracket_operation.expression) };
 
  
  object_call {-> expression } = object_call_expression T.period {-> object_call_expression.expression };
  call_expression {-> expression } = object_call? T.id T.l_par expression_list T.r_par {-> New expression.call(object_call.expression, id, [expression_list.expression]) };
  
  
  
  expression {-> expression } = or_expression {-> or_expression.expression };
  or_expression {-> expression } = {or} or_expression T.or and_expression {-> New expression.or(or, or_expression.expression, and_expression.expression) }
                                 | {expr1} and_expression {-> and_expression.expression };
  and_expression {-> expression } = {and} and_expression T.and relational_expression {-> New expression.and(and, and_expression.expression, relational_expression.expression) }
                                  | {expr2} relational_expression {-> relational_expression.expression };
  relational_expression {-> expression } = {relational} [first]:concat_expression relational_operator [second]:concat_expression {-> New expression.comparison(relational_operator.operator, first.expression, second.expression) }
                                         | {expr3} concat_expression {-> concat_expression.expression };
  concat_expression {-> expression } = {concat} concat_expression T.concat_op add_expression {-> New expression.concatenation(concat_op, concat_expression.expression, add_expression.expression) }
                                     | {expr4} add_expression {-> add_expression.expression };
  add_expression {-> expression } = {add} add_expression add_operator mult_expression {-> New expression.add(add_operator.operator, add_expression.expression, mult_expression.expression) }
                                  | {expr5} mult_expression {-> mult_expression.expression };
  mult_expression {-> expression } = {mult} mult_expression mult_operator unary_expression {-> New expression.mult(mult_operator.operator, mult_expression.expression, unary_expression.expression) }
                                   | {expr6} unary_expression {-> unary_expression.expression };
  unary_expression {-> expression } = {unary} unary_operator unary_expression {-> New expression.unary(unary_operator.operator, unary_expression.expression) }
                                    | {expr7} object_call_expression {-> object_call_expression.expression };
                                    
                                    
  object_call_expression {-> expression } = {get_at} get_at_reference {-> get_at_reference.expression }
                                          | {call_expr} call_expression {-> call_expression.expression }
                                          | {expr9} group_expression {-> group_expression.expression };
                                   
                                   
  group_expression {-> expression } = {group} T.l_par expression T.r_par {-> expression.expression }
                                    | {expr11} real_expression {-> real_expression.expression };
  real_expression {-> expression } = {identifier} T.id {-> New expression.identifier(id) }
                                     | {string} T.strlit {-> New expression.string(strlit) }
                                     | {int} T.intlit {-> New expression.integer(intlit) }
                                     | {true} T.true {-> New expression.true() }
                                     | {false} T.false {-> New expression.false() }
                                     | {null} T.null {-> New expression.null() }
                                     | {me} T.me {-> New expression.me() }
                                     | {new} T.new var_type {-> New expression.new_object(var_type.type) };
  
  
  
Abstract Syntax Tree
  
  start = class_def*;
  class_def = [begin_name]:T.id [extends]:T.id? var_declaration* method_declaration* [end_name]:T.id;
  
  var_declaration = [name]:T.id type? [instantiation]:expression?;
  
  method_declaration = [begin_name]:T.id argument_declaration* type? var_declaration* statement* [end_name]:T.id;
  
  argument_declaration = [name]:T.id type;
  
  type = {other} T.id
       | {integer} T.int
       | {string} T.string
       | {boolean} T.boolean
       | {array} type expression;
  
  else_helper = ;
  statement = {assignment} T.id [array_access]:expression* [value]:expression
  			| {if} T.if expression [true_case]:statement* else_helper [false_case]:statement*
  			| {loop} T.loop [case]:expression statement*
  			| {call} expression;
  			
  expression = {or} T.or [expr1]:expression [expr2]:expression
             | {and} T.and [expr1]:expression [expr2]:expression
             | {comparison} operator [expr1]:expression [expr2]:expression
             | {concatenation} T.concat_op [expr1]:expression [expr2]:expression
             | {add} operator [expr1]:expression [expr2]:expression
             | {mult} operator [expr1]:expression [expr2]:expression
             | {unary} operator expression
             | {array} T.id expression
             | {call} [object]:expression? [method]:T.id [arguments]:expression*
             | {identifier} T.id
             | {string} T.strlit
             | {integer} T.intlit
             | {true}
             | {false}
             | {null}
             | {me}
             | {new_object} type;
  
  operator = {not} [op]:T.not | {plus} [op]:T.plus_op | {minus} [op]:T.minus_op | {mult} [op]:T.mult_op | {div} [op]:T.div_op | {equal} [op]:T.eq_op | {greater} [op]:T.gt_op | {greater_equal} [op]:T.gte_op;
  
  
  
  
  